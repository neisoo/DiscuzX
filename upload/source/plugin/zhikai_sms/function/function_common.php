<?phpif(!defined('IN_DISCUZ')) {	exit('Access Denied');}function config(){	global $_G;	if(empty($_G['cache']['plugin'])){		loadcache('plugin');	}	list($logseccode, $secqaacheck) = seccheck('login');//登录是否开启验证	list($regseccode, $secqaacheck) = seccheck('register');//注册是否开启验证	$config = $_G['cache']['plugin']['zhikai_sms'];    $config['logseccode'] = $logseccode;    $config['regseccode'] = $regseccode;	return $config;}function zhikai_writetocache($arr=null){	require_once libfile('function/cache');	$smstemparr = array();	if(file_exists($zhikai_smsfile = DISCUZ_ROOT.'./data/sysdata/cache_zhikai_sms.php')) {		@include $zhikai_smsfile;	}	if ($arr == null && !empty($smstemparr)) {		return $smstemparr;	}else{		writetocache('zhikai_sms',getcachevars(array('smstemparr'=>$arr)));	}}//发送短信function sendsms($temptype, $phone, $tid=''){    $config = config();	$temparr = zhikai_writetocache();	$apitype = '';	foreach ($temparr as $value) {		if($value['temptype'] == $temptype){		    $apitype = $value['tempapi'];		}	}	if($apitype == 2){		$statusStr = array(				"0" => lang('plugin/zhikai_sms', 'langssms095'),				"-1" => lang('plugin/zhikai_sms', 'langssms96'),				"-2" => lang('plugin/zhikai_sms', 'langssms097'),				"30" => lang('plugin/zhikai_sms', 'langssms098'),				"40" => lang('plugin/zhikai_sms', 'langssms099'),				"41" => lang('plugin/zhikai_sms', 'langssms100'),				"42" => lang('plugin/zhikai_sms', 'langssms101'),				"43" => lang('plugin/zhikai_sms', 'langssms102'),				"50" => lang('plugin/zhikai_sms', 'langssms103')			);		$smsarr = gettemplate($temptype, $apitype);		$code = $smsarr['tmparr']['code'];		$smsid = sendsmsinsert($phone, $code ,$temptype, $tid);		if($smsid){			$temptxt = diconv_utf8($smsarr['temptxt'].lang('plugin/zhikai_sms', 'langssms104').$smsarr['tmparr']['tempsign'].lang('plugin/zhikai_sms', 'langssms105'));			$smsapi = "http://www.smsbao.com/";			$user = $config['dxbzh'];			$pass = md5($config['dxbkey']);			$content = $temptxt;			$sendurl = $smsapi."sms?u=".$user."&p=".$pass."&m=".$phone."&c=".urlencode($content);			$result = dfsockopen($sendurl);			//如果发送成功更新发送成功状态			if($result == 0){			   C::t('#zhikai_sms#zhikai_smslog')->update(array('send_state' => 1, 'return_servicer' => $statusStr[$result]), array('id' => $smsid));			   return true;            }else{			   C::t('#zhikai_sms#zhikai_smslog')->update(array('send_state' => 2, 'return_servicer' => $statusStr[$result]), array('id' => $smsid));			   return false;			}		}else{			return false;		}	}else if($apitype == 1){		if (file_exists(DISCUZ_ROOT.'./source/plugin/zhikai_sms/include/SignatureHelper.php')) {			@include_once DISCUZ_ROOT.'./source/plugin/zhikai_sms/include/SignatureHelper.php';		}		$smsarr = gettemplate($temptype, $apitype);//获取短信数据数组  未转码		$SignName = diconv_utf8($smsarr['tmparr']['tempsign']);//签名		$code = $smsarr['tmparr']['code'];//验证码				if($smsarr['vararr']['ignore']){			$TemplateParam = $smsarr['tmparr']['vartepm'];			$TemplateParam = arr_diconv_utf8($TemplateParam);		}else{			$TemplateParam = $smsarr['vararr'];			$TemplateParam = arr_diconv_utf8($TemplateParam);		}		$accessKeyId = $config['accessid'];		$accessKeySecret = $config['accesskey'];		$params = array ();		$params["PhoneNumbers"] = $phone;		$params["SignName"] = $SignName;		$params["TemplateCode"] = $smsarr['tmparr']['tempid'];//短信模板ID		$params['TemplateParam'] = $TemplateParam;		if(!empty($params["TemplateParam"]) && is_array($params["TemplateParam"])) {			$params["TemplateParam"] = json_encode($params["TemplateParam"], JSON_UNESCAPED_UNICODE);		}		$helper = new SignatureHelper();//阿里要求 PHP5.4以上		$smsid = sendsmsinsert($phone, $code ,$temptype, $tid);				if($smsid){      			$content = $helper->request(				$accessKeyId,				$accessKeySecret,				"dysmsapi.aliyuncs.com",				array_merge($params, array(					"RegionId" => "cn-hangzhou",					"Action" => "SendSms",					"Version" => "2017-05-25",				))				// fixme 选填: 启用https				// ,true			);            $contarray = json_decode(json_encode($content),TRUE);			$Message = diconv_utf8_charset($contarray["Message"]);			$MessageCode = diconv_utf8_charset($contarray["Code"]);			//更新发送成功状态 daddslashes($Message)			if($Message == 'OK' && $MessageCode == 'OK'){			   C::t('#zhikai_sms#zhikai_smslog')->update(array('send_state' => 1, 'return_servicer' => daddslashes($Message)), array('id' => $smsid));			   return true;            }else{			   C::t('#zhikai_sms#zhikai_smslog')->update(array('send_state' => 2, 'return_servicer' => daddslashes($Message)), array('id' => $smsid));			   return false;			}					}else{			return false;		}	}}//创建发送数据记录function sendsmsinsert($phone, $code ,$send_type, $tid=''){	global $_G;    $iparr = explode('.', $_G['clientip']);    $phonelist = getsmslist($phone);	$data = array();	$data['uid'] = $_G['uid'] ? $_G['uid'] : '';//用户UID	$data['tid'] = $tid ? $tid : '';//tID	$data['mobile'] = $phone;//手机号 	$data['send_type'] = $send_type;//发送类型 -- 1.用户注册  2.手机认证 3.重置密码 4.短信提醒  5.安全校验登录 6.更换绑定手机 等于模板类型	$data['smscode'] = $code;//短信验证码	if($phonelist){		$data['mobile_mts'] = $phonelist['mts'];//手机号段   		$data['mobile_province'] = $phonelist['province'];//手机省份		$data['mobile_catname'] = $phonelist['catname'];//手机运营商		$data['mobile_areavid'] = $phonelist['areavid'];//手机Vid		$data['mobile_ispvid'] = $phonelist['ispvid'];//手机pvid		$data['mobile_carrier'] = $phonelist['carrier'];//手机	}	$data['userip1'] = $iparr[0];	$data['userip2'] = $iparr[1];	$data['userip3'] = $iparr[2];	$data['userip4'] = $iparr[3];	$data['verify_state'] = 2;//完成状态  1.正常完成  2.发送成功处理中	$data['send_date'] = TIMESTAMP;    $sms_id = C::t('#zhikai_sms#zhikai_smslog')->insert($data);	return $sms_id;}function gettemplate($type, $api){    global $_G;	$config = config();    $code = rand(1000,9999);    $temp = zhikai_writetocache();    if($_G['uid']){$user = getuserbyuid($_G['uid']);}	foreach ($temp as $key => $value) {		if($value['temptype'] == $type && $value['tempapi'] == $api){			preg_match_all("/\Q$\E\{(.*?)\}/is", $value['temptxt'], $matches);			$str = array();			$tmparr = array('tempname' => $value['tempname'], 'tempid' => $value['tempid'], 'tempsign' => $value['tempsign'], 'code' => $code);			$vararr = array();			foreach ($matches[1] as $k => $v) {				$tmp = explode("|", $v);				switch ($tmp[0]) {					case 'code':						$str[$k] = $code;						$tmparr['vartepm']['code'] = $code;						$vararr[$tmp[1] ? $tmp[1] : 'ignore'] = $code;						break;					case 'time':						$str[$k] = $config['codetime'];						$tmparr['vartepm']['time'] = $config['codetime'];						$vararr[$tmp[1] ? $tmp[1] : 'ignore'] = $config['codetime'];						break;					case 'username':						$str[$k] = $user['username'] ? $user['username'] : '';						$tmparr['vartepm']['username'] = $user['username'] ? $user['username'] : '';						$vararr[$tmp[1] ? $tmp[1] : 'ignore'] = $user['username'] ? $user['username'] : '';						break;					case 'submittime':						$str[$k] = date("Y-m-d",TIMESTAMP);						$tmparr['vartepm']['submittime'] = date("Y-m-d",TIMESTAMP);						$vararr[$tmp[1] ? $tmp[1] : 'ignore'] = date("Y-m-d",TIMESTAMP);						break;					default:						break;				}			}			$temptxt = str_replace($matches[0], $str, $value['temptxt']);	        return array('temptxt' => $temptxt, 'tmparr' => $tmparr, 'vararr' => $vararr,);		}	}}function getsmslist($phone){    $url = 'https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel='.$phone;    $result = dfsockopen($url);	preg_match_all("/\'(.*)\'/", $result, $matches);	if (!empty($matches[1])) {		$phonearr = array();		$phonearr['mts'] = $matches[1][0];		$phonearr['province'] = $matches[1][1];		$phonearr['catname'] = $matches[1][2];		$phonearr['areavid'] = $matches[1][4];		$phonearr['ispvid'] = $matches[1][5];		$phonearr['carrier'] = $matches[1][6];		return daddslashes($phonearr);	}else{		return false;	}}function CheckBinPlugin($uid){	return DB::result_first('select id from %t where uid=%d', array('zhikai_userdata', $uid));}function CheckBinPlugin_state($uid){	return DB::result_first('select mobile_state from %t where uid=%d', array('zhikai_userdata', $uid));}function update_smslist($id, $uid){    return C::t('#zhikai_sms#zhikai_smslog')->update(array('verify_state' => 1, 'uid' => $uid), array('id' => $id));}function get_smslist($send_type, $phone, $code){    $id = DB::result_first('select id from %t where send_state=1 and verify_state=2 and mobile=%s and send_type=%d and smscode=%d', array('zhikai_smslog', $phone, $send_type, $code));	return $id;}function CodeCheck($send_type, $phone, $code){	$config = config();	$send_date = DB::result_first('select send_date from %t where send_state=1 and mobile=%d and send_type=%d and smscode=%d', array('zhikai_smslog', $phone, $send_type, $code));	if (($send_date + intval($config['codetime'])) < TIMESTAMP){		return false;	}else{		return true;	}}function isphone_exist($phone, $isuid=false){	if($isuid){		$mobile = DB::result_first('select mobile from %t where uid=%s', array('common_member_profile', $phone));		return $mobile;	}else{		return DB::result_first('select mobile from %t where mobile=%s', array('common_member_profile', $phone)) ? true : false;	}}function get_useruid($phone){	$uid = DB::result_first('select uid from %t where mobile=%s', array('common_member_profile', $phone));	return $uid;}function isphone_verify($uid){    $verifyid = get_phoneverifyid();    $verify = DB::result_first('select verify'.$verifyid.' from %t where uid=%d', array('common_member_verify', $uid));	return $verify == 1 ? true : false;}function addphone($phone, $uid){	$cid = CheckBinPlugin($uid);	if(!$cid){		DB::insert('zhikai_userdata',			array( 'uid' => $uid,				   'mobile_state' => 1, //机绑定状态 1.已绑定  2.未绑定				   'verify_state' => '', //认证状态  1.已认证  2.未认证				   'upusnamecut' => 0,//修改用户名次数记录				   'date'=> TIMESTAMP			));	}    return DB::query('update %t set mobile=%s where uid=%d',array('common_member_profile', $phone, $uid));}function phone_setverify($uid){    $verifyid = get_phoneverifyid();    $verify = DB::result_first('select verify'.$verifyid.' from %t where uid=%d', array('common_member_verify', $uid));	    $cid = CheckBinPlugin($uid);	if($cid){		DB::query('update %t set verify_state=%d where id=%d',array('zhikai_userdata', 1, $cid));	}    if(!empty($verify) && $verify != 1){		return DB::query('update %t set verify'.$verifyid.'=%d where uid=%d',array('common_member_verify', 1, $uid));	}else{		return DB::insert('common_member_verify',array('verify'.$verifyid => 1, 'uid' => $uid),true);	}}function get_phoneverifyid(){	$config = config();	if ($config['phoneverify']) {		return $config['phoneverify'];	}	$verify = (array)unserialize(C::t('common_setting')->fetch(array('skey'=>'verify')));	foreach ($verify as $key => $value) {		if (isset($value['field']['mobile'])) {		    return $key;		}	}}function get_regname($username){	if(strlen($username) > 15){		$username = mb_substr($username, -15);	}	if(C::t('common_member')->fetch_uid_by_username($username) || C::t('common_member_archive')->fetch_uid_by_username($username)) {		$username = $username.'_'.random(3);		return get_regname($username);	}else{		return daddslashes($username);	}}function phone_login($send_type, $phone, $code){	global $_G;    $config = config();	$user = array();	require_once libfile('function/member');	loaducenter();	$user['email'] = 'phone_'.strtolower(random(10)).$config['emall'];    if(isphone_exist($phone)){        $uid = get_useruid($phone);		$member = getuserbyuid($uid, 1);		$id = get_smslist($send_type, $phone, $code); 		if($member && $id){			if(isset($member['_inarchive'])) {				C::t('common_member_archive')->move_to_master($uid);			}			$cookietime = 1296000;			setloginstatus($member, $cookietime);			update_smslist($id, $uid);			return array('state' => true, 'login'=> true, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms139').$member['username'].lang('plugin/zhikai_sms', 'langssms140'));		}else{			return array('state' => false, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms094'));		}	}else{		$username = $config['prefix'].'_'.$phone;        $user['username'] = get_regname($username);	    $user['passwd'] = random(10);		if($_G['cache']['ipctrl']['ipregctrl']) {//IP 时间限制注册			foreach(explode("\n", $_G['cache']['ipctrl']['ipregctrl']) as $ctrlip) {				if(preg_match("/^(".preg_quote(($ctrlip = trim($ctrlip)), '/').")/", $_G['clientip'])) {					$ctrlip = $ctrlip.'%';					$_G['setting']['regctrl'] = $_G['setting']['ipregctrltime']; 					break;				} else {					$ctrlip = $_G['clientip'];				}			}		} else {			$ctrlip = $_G['clientip'];		}		if($_G['setting']['regctrl']) {			if(C::t('common_regip')->count_by_ip_dateline($ctrlip, $_G['timestamp']-$_G['setting']['regctrl']*3600)) {				return array('state' => false, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms121').$_G['setting']['regctrl'].lang('plugin/zhikai_sms', 'langssms122'));			}		}		$setregip = null;		if($_G['setting']['regfloodctrl']) {			$regip = C::t('common_regip')->fetch_by_ip_dateline($_G['clientip'], $_G['timestamp']-86400);			if($regip) {				if($regip['count'] >= $_G['setting']['regfloodctrl']) {					return array('state' => false, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms123').$_G['setting']['regfloodctrl'].lang('plugin/zhikai_sms', 'langssms124'));				} else {					$setregip = 1;				}			} else {				$setregip = 2;			}		}		$uid = uc_user_register($user['username'], $user['passwd'], $user['email']);		$id = get_smslist($send_type, $phone, $code);		if($uid > 0 && $id) {			if($setregip !== null) {				if($setregip == 1) {					C::t('common_regip')->update_count_by_ip($_G['clientip']);				} else {					C::t('common_regip')->insert(array('ip' => $_G['clientip'], 'count' => 1, 'dateline' => $_G['timestamp']));				}			}			if($_G['setting']['regctrl'] || $_G['setting']['regfloodctrl']) {				C::t('common_regip')->delete_by_dateline($_G['timestamp']-($_G['setting']['regctrl'] > 72 ? $_G['setting']['regctrl'] : 72)*3600);				if($_G['setting']['regctrl']) {					C::t('common_regip')->insert(array('ip' => $_G['clientip'], 'count' => -1, 'dateline' => $_G['timestamp']));				}			}			$groupid = $config['groupid'] ? $config['groupid'] : 10;			$init_arr = array('credits' => explode(',', $_G['setting']['initcredits']),'emailstatus' => 0);			C::t('common_member')->insert($uid, $user['username'], md5(random(10)), $user['email'], $_G['clientip'], $groupid, $init_arr);			$result = uc_user_login($user['username'],$user['passwd'],0);			if ($result[0] > 0) {				$member = getuserbyuid($result[0], 1);				if(isset($member['_inarchive'])) {					C::t('common_member_archive')->move_to_master($result[0]);				}				$cookietime = 1296000;				setloginstatus($member, $cookietime);				dsetcookie('lip', $_G['member']['lastip'].','.$_G['member']['lastvisit']);				C::t('common_member_status')->update($result[0], array('lastip' => $_G['clientip'], 'lastvisit' =>TIMESTAMP, 'lastactivity' => TIMESTAMP));								//				include_once libfile('function/stat');				updatestat('register');				if(!function_exists('build_cache_userstats')) {					require_once libfile('cache/userstats', 'function');				}				build_cache_userstats();				//								addphone($phone, $result[0]);				update_smslist($id, $result[0]);				if($config['setverify']){					phone_setverify($result[0]);				}                Dz_welcome($result[0]);//欢迎通知				if($config['smserg_notice']){				    notification_add($uid , 'system', lang('plugin/zhikai_sms', 'langssms106').$user['username'].lang('plugin/zhikai_sms', 'langssms107').$user['passwd'].lang('plugin/zhikai_sms', 'langssms108'), array(), 1);				}                $group = C::t('common_usergroup')->range();                return array('state' => true, 'register'=> true, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms132').$group[$groupid]['grouptitle']);			}else{				return array('state' => false, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms133'));			}		}else{			return array('state' => false, 'statemsg'=> lang('plugin/zhikai_sms', 'langssms094'));		}	}}function Dz_welcome($uid){	global $_G;	$welcomemsgtxt = $_G['setting']['welcomemsgtxt'];	$welcomemsg = $_G['setting']['welcomemsg'];	$welcomemsgtitle = $_G['setting']['welcomemsgtitle'];	if($welcomemsg && !empty($welcomemsgtxt)) {		$welcomemsgtitle = replacesitevar($welcomemsgtitle);		$welcomemsgtxt = replacesitevar($welcomemsgtxt);		if($welcomemsg == 1) {			$welcomemsgtxt = nl2br(str_replace(':', '&#58;', $welcomemsgtxt));			notification_add($uid, 'system', $welcomemsgtxt, array('from_id' => 0, 'from_idtype' => 'welcomemsg'), 1);		} elseif($welcomemsg == 2) {			sendmail_cron($email, $welcomemsgtitle, $welcomemsgtxt);		} elseif($welcomemsg == 3) {			sendmail_cron($email, $welcomemsgtitle, $welcomemsgtxt);			$welcomemsgtxt = nl2br(str_replace(':', '&#58;', $welcomemsgtxt));			notification_add($uid, 'system', $welcomemsgtxt, array('from_id' => 0, 'from_idtype' => 'welcomemsg'), 1);		}	}}				//DZ submitcheck 验证函数function _submitcheck($var, $allowget = 0, $seccodecheck = 0, $secqaacheck = 0) {	if(!getgpc($var)) {		return FALSE;	} else {		global $_G;		if($allowget || ($_SERVER['REQUEST_METHOD'] == 'POST' && !empty($_GET['formhash']) && $_GET['formhash'] == formhash() && empty($_SERVER['HTTP_X_FLASH_VERSION']) && (empty($_SERVER['HTTP_REFERER']) ||			strncmp($_SERVER['HTTP_REFERER'], 'http://wsq.discuz.com/', 22) === 0 || preg_replace("/https?:\/\/([^\:\/]+).*/i", "\\1", $_SERVER['HTTP_REFERER']) == preg_replace("/([^\:]+).*/", "\\1", $_SERVER['HTTP_HOST'])))) {			if(checkperm('seccode')) {				if($secqaacheck && !check_secqaa($_GET['secanswer'], $_GET['secqaahash'])) {					//showmessage('submit_secqaa_invalid');					return FALSE;				}				if($seccodecheck && !check_seccode($_GET['seccodeverify'], $_GET['seccodehash'], 0, $_GET['seccodemodid'])) {					//showmessage('submit_seccode_invalid');					return FALSE;				}			}			return TRUE;		} else {			showmessage('submit_invalid');		}	}}function smsnotice($uid, $tid){	$phone = isphone_exist($uid, true);	if(!empty($phone) && $uid){		if(Code_Conunt(4, $phone)){			notification_add($uid, 'system', lang('plugin/zhikai_sms', 'langssms109'));		}else{			sendsms(4, $phone, $tid);		    $id = DB::result_first('select id from %t where mobile=%s and tid=%d and send_state=1 and verify_state=2 and send_type=4', array('zhikai_smslog', $phone, $tid));			C::t('#zhikai_sms#zhikai_smslog')->update(array('verify_state' => 1), array('id' => $id));		}	}else{        notification_add($uid, 'system', lang('plugin/zhikai_sms', 'langssms110'));	}}function Code_Conunt($send_type, $phone){    $config = config();	if(in_array($send_type, dunserialize($config['code_conunt_type']))){		$code_conunt = DB::result_first('select count(*) from %t where mobile=%s and send_date+'.$config['code_conunt_time'].'>%d and send_type=%d and send_state=1 order by send_date desc', array('zhikai_smslog', $phone, TIMESTAMP, $send_type));		if($code_conunt >= $config['code_conunt']){			return true;		}else{			return false;		}	}else{		return false;	}}function isphone($phone){    if(is_numeric($phone)){		return preg_match('#^13[\d]{9}$|^14[5,7]{1}\d{8}$|^15[^4]{1}\d{8}$|^17[0,1,6,7,8]{1}\d{8}$|^18[\d]{9}$#', $phone) ? true : false;    }else{		return false;	}}function sms_get_select($name, $data, $selected, $initial) {    $select = '<select name="'.$name.'" id="'.$name.'">';    if ($initial) {        $select.= '<option value="'.$initial[0].'">'.$initial[1].'</option>';    }    foreach ($data as $v) {        $sed = $selected == $v[0] ? 'selected' : '';        $select.= '<option value="'.$v[0].'" '.$sed.'>'.$v[1].'</option>';    }    $select.= '</select>';    return $select;}function sms_arrjson($arr){	if (strtolower(CHARSET) == 'gbk') {		foreach($arr as $k => $v){		  $ret[$k] = iconv('gbk', 'utf-8',$v);		}	    echo json_encode($ret);exit;	}else{	    echo json_encode($arr);exit;	}}function arr_diconv_utf8($arr){	if (strtolower(CHARSET) == 'gbk') {		foreach($arr as $k => $v){		  $ret[$k] = iconv('gbk', 'utf-8',$v);		}        return $ret;	}else{		return $arr;	}}function diconv_utf8($str){	if(strtolower(CHARSET) == 'gbk'){		$str = diconv($str, CHARSET, 'utf-8');	}	return $str;}function diconv_gbk_charset($str){	return  diconv($str,'gbk',CHARSET);}function diconv_utf8_charset($str){	return  diconv($str,'utf-8',CHARSET);}function _DeleteHtml($str){	$str = trim($str);//清除字符串两边的空格	$str = strip_tags($str,"");	$str = preg_replace("/\t/","",$str);	$str = preg_replace("/\r\n/","",$str); 	$str = preg_replace("/\r/","",$str); 	$str = preg_replace("/\n/","",$str); 	$str = preg_replace("/ /","",$str);	$str = preg_replace("/  /","",$str);	return trim($str);}?>