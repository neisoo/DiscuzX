<!--{block file}-->
<link href="source/plugin/zhikai_n5video/static/css/style.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/static/css/jquery.seekbar.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/uikit.docs.min.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/components/progress.css " rel="stylesheet" />
<link rel="stylesheet" href="source/plugin/zhikai_n5video/video-js/video-js.min.css">

<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.shardupload.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.seekbar.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/uikit/js/uikit.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/video-js/video.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/mp3-recorder/recorder.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/mp3-recorder/mp3encoder.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/mp3-recorder/wavencoder.js"></script>

<style>

/*
 * 取消height:100%的定义。
 * 原因：如果html有height:100%或具体值的定义，那么在弹出uikit的模态对话框时，
 * uikit会添加uk-modal-page样式到html和body，这时界面会回滚到顶部。
 */
html {
	height: auto;
}

::cue {
	background: none;
	color: #fff;
	text-shadow: 0 1px #000, 1px 0 #000, -1px 0 #000, 0 -1px #000;
	font-size: medium;
}
::cue(v[voice=hanhan]) {
	color: green;
}
::cue(.red) {
	color: red;
}

.fixed_div {
	width: 100%;
	position: fixed;
	background: #e5e5e5;
	top: 0;
	z-index: 1000;
	left: 0px;
}

.sentence_wrap {
	padding: 10px;
}

.vidoe_wrap{
	width:100%;
	position:relative;
	padding-bottom:56.25%; /*需要用padding来维持16:9比例,也就是9除以16*/
	height: 0;
	video{
		position: absolute;
		top:0;
		left: 0;
		width: 100%;
		height: 100%
	}
}

/* 显示当前时间和总时间 */
.video-js .vjs-time-control {
    display: block;
}
.video-js .vjs-remaining-time {
    display: none;
}

/* 顶部的功能条 */
.video-js .vjs-top-bar {
	font-size: 2.5em;
	line-height: 1em;
	height: 1.5em;
	width: 100%;
	display: block;

	/*顶部对齐*/
	position: absolute;
	top:0em;

	padding: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0));
	background: -moz-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0)); /*IE10及IE10+*/

	transition: all 0.4s;
}

/* 点击视频时显示的按钮和状态条区域 */
.video-js .vjs-control-panel {
	transition: visibility 0.1s, opacity 0.1s;
}

/* 顶部中央的标题 */
.video-js .vjs-control-panel .vjs-head-title {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	top: 0.4em;
	height: 1.6em;
	width: 100%;

	/* 文字大小 */
	font-size: 1.6em;
	line-height: 1.6em;
}

/* 顶部中央的标题文字 */
.video-js .vjs-control-panel .vjs-head-title .vjs-icon-placeholder {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

/* 底部的状态条 */
.video-js .vjs-control-panel .vjs-status-bar {
	font-size: 0.5em;
	height: 2.5em;
	width: 100%;
	display: block;
	position: absolute;
	bottom: 0em;
	padding-top: 0.75em;
	padding-bottom: 0.75em;
	cursor: pointer;
	opacity: 1;
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1));
	background: -moz-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1)); /*IE10及IE10+*/
}

/* 状态条的当前时间 */
.video-js .vjs-control-panel .vjs-status-bar .vjs-current-time {
	/* 位置*/
	display: block;
	position: absolute;
	padding: 0;
	left: 1em;
	height: 100%;
	width: 3em;
}


/* 状态条的总时间 */
.video-js .vjs-control-panel .vjs-status-bar .vjs-duration-time {
	/* 位置*/
	display: block;
	position: absolute;
	padding: 0;
	right: 1em;
	height: 100%;
	width: 3em;
}

/* 状态条的进度条 */
.video-js .vjs-control-panel .vjs-process-bar {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 1.1em;
	padding-right: 5em;
	padding-left: 4.5em;
	height: 0.3em;
	width: 100%;
}

.video-js .vjs-control-panel .vjs-process-bar .uk-progress {
	height: 100%;
	line-height: 100%;
}

/* 圆形按钮 */
.video-js .vjs-round-play-button {
	font-size: 3em;
	line-height: 1.5em;
	height: 2em;
	width: 2em;
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;
	opacity: 1;
	border: 0.03em solid rgba(255, 255, 255, 0.7);
	background-color: #2B333F;
	background-color: rgba(43, 51, 63, 0.7);
	border-radius: 100%;
	transition: all 0.4s;
}

.video-js .vjs-play-normal {
	top: 50%;
	left: 50%;
	height: 2em;
	width: 2em;
	margin-top: -1em;
	margin-left: -1em;
}

.video-js .vjs-play-slower {
	top: 70%;
	left: 30%;
	height: 1.4em;
	width: 1.4em;
	margin-top: -0.7em;
	margin-left: -0.7em;
}

.video-js .vjs-play-slowest {
	top: 70%;
	left: 15%;
	height: 1.4em;
	width: 1.4em;
	margin-top: -0.7em;
	margin-left: -0.7em;
}

.video-js .vjs-round-play-button .vjs-icon-placeholder:before {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;

	font-family: VideoJS;
	font-weight: normal;
	font-style: normal;
}

.video-js .vjs-play-normal .vjs-icon-placeholder:before {
	font-size: 1.5em;
	margin-top: 0.15em;
	content: "\\f101"; 
}

.video-js .vjs-play-slower .vjs-icon-placeholder:before {
	font-size: 0.4em;
	margin-top: -0.3em;
	content: "x0.75"; 
}

.video-js .vjs-play-slowest .vjs-icon-placeholder:before {
	font-size: 0.4em;
	margin-top: -0.3em;
	content: "x0.5"; 
}

.sentence-play-button, .sentence-record-button{
	color: white;
	width: 48px;
	height: 48px;
	font-size: 22px;
	border-radius: 50%;
}

.uk-panel-title {
    margin-bottom: 6px;
}

.uk-article-divider {
    margin-top: 6px;
    margin-bottom: 6px;
}

/* 左上角回退按钮 */
.dubbing-back-button {
	display: block;
	position: fixed;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	top: 1em;
	left: 1em;
	height: 2em;
	width: 2em;
	margin-top: -1em;
	margin-left: -1em;

	/* 文字大小 */
	font-size: 2em;
	line-height: 2em;

	/* 在对话框遮罩层的下层，视频的上层 */
	z-index:1009;

	color: white;
}

/* 左上角回退按钮图标*/
.dubbing-back-button .vjs-icon-placeholder:before {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	margin-top: 0.4em;
}

/********************************************************************
 * 預览相关
 ********************************************************************/
/* 所有控件的容器 */
.zyh-preview-top {
	position: absolute;
	top:0em;
	width: 100%;
	height: 3em;
	overflow: hidden;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

.zyh-preview-bottom {
	position: absolute;
	bottom:0em;
	width: 100%;
	height: 2.5em;
	overflow: hidden;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部的功能条 */
.zyh-preview-top-bar {
	display: block;
	font-size: 0.5em;
	line-height: 3em; /* 使文字垂直居中：文字行高与容器高一样 */
	height: 3em;
	width: 100%;
	text-align: center;
	vertical-align:middle;
	color: white;

	/*顶部对齐*/
	position: absolute;
	top: 0em;

	padding: 0;
	margin: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0));
	background: -moz-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏顶部功能条 */
.vjs-user-inactive .zyh-preview-top-bar {
	top: -3em;
}

/* 左上角回退按钮 */
.zyh-preview-back-button {
	cursor: pointer;
	float: left;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	height: 100%;
	width: 1em;

	font-size: 5em;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 左上角回退按钮图标*/
.zyh-preview-back-button .zyh-icon-placeholder {
	text-align: center;
	vertical-align: middle;
	width: 100%;
	height: 100%;
}

/* 右上角菜单按钮 */
.zyh-preview-menu-button {
	cursor: pointer;
	float: right;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	height: 100%;
	width: 3em;

	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部中央的标题 */
.zyh-preview-head-title {
	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置居中 */
	margin: 0 1.5em;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部中央的标题文字 */
.zyh-preview-head-title .zyh-icon-placeholder {
	width: 100%;
	height: 100%;
	font-size: 0.8em;

	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 底部的状态条 */
.zyh-preview-bottom-bar {
	display: block;
	height: 2.5em;
	line-height: 2.5em; /* 使文字垂直居中：文字行高与容器高一样 */
	width: 100%;
	text-align: center;
	vertical-align:middle;
	color: white;

	font-family: VideoJS;
	font-weight: normal;
	font-style: normal;
	font-size: 0.5em;

	/*底部对齐*/
	position: absolute;
	bottom: 0em;

	padding: 0;
	margin: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1));
	background: -moz-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏底部功能条 */
.vjs-user-inactive .zyh-preview-bottom-bar {
	bottom: -2.5em;
}

/* 左下角当前时间 */
.zyh-preview-current-time {
	/* 位置*/
	float: left;
	width: 4.5em;
}

/* 右下角总时间 */
.zyh-preview-duration-time {
	/* 位置*/
	float: right;
	width: 4.5em;
}

/* 右下角全屏 */
.zyh-preview-fullscreen {
	/* 位置*/
	float: right;
	width: 2.5em;
}

/* 正常显示进入全屏图标 */
.zyh-preview-fullscreen .zyh-icon-placeholder:before {
	content: "\\f108"; 
}

/* 全屏状态下显示退出全屏图标 */
.vjs-fullscreen .zyh-preview-fullscreen .zyh-icon-placeholder:before {
	content: "\\f109"; 
}

/* 底部中间的进度条 */
.zyh-preview-seekbar {
	display: block;
	position: absolute;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 25%;
	left:4.5em;
	right: 7em;
	height: 50%;
	width: auto;
	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

/* 中间的圆形按钮 */
.zyh-round-play-button {
	font-size: 3em;
	line-height: 1.5em;
	height: 2em;
	width: 2em;
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;
	border: 0.03em solid rgba(255, 255, 255, 0.7);
	background-color: #2B333F;
	background-color: rgba(43, 51, 63, 0.7);
	border-radius: 100%;

	opacity: 1;
	transition: all 0.4s;
}

/* 不活动时隐藏按钮 */
.vjs-has-started.vjs-user-inactive .zyh-round-play-button {
	opacity: 0;
}

.zyh-preview-play-normal {
	top: 50%;
	left: 50%;
	height: 2em;
	width: 2em;
	margin-top: -1em;
	margin-left: -1em;
}

.zyh-round-play-button .zyh-icon-placeholder:before {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;

	font-family: VideoJS;
	font-weight: normal;
	font-style: normal;
	font-size: 1.5em;
	margin-top: 0.15em;
}

/* 播放状态图标 */
.vjs-playing .zyh-preview-play-normal .zyh-icon-placeholder:before {
	content: "\\f103"; 
}

/* 暂停状态图标 */
.vjs-paused .zyh-preview-play-normal .zyh-icon-placeholder:before {
	content: "\\f101"; 
}
  
</style>


<div id="dubbing_params" style="display: none">
	<div id="tid" tid="{$attachInfo[tid]}" ></div>
	<div id="subject" tid="{$attachInfo[subject]}"></div>

	<input type="text" name="subject" value="dubbing:{$attachInfo[subject]}" id="needsubject" class="txt"/>
	<input type="hidden" id="postsave" name="save" value="">

	<!--{if $attachInfo['accompany'] != null}-->
	<audio id="accompany" src="{$attachInfo[accompany]}"></audio>
	<!--{/if}--> 
	<audio id="dubbing"></audio>
	<audio id="startRecordSnd" src="source/plugin/zhikai_n5video/di.ogg"></audio>

</div>

<!-- 配音界面 -->
<div id="dubbing_ui">
	<!-- 后退按钮 -->
	<div class="dubbing-back-button">
		<span aria-hidden="true" class="vjs-icon-placeholder uk-icon-angle-left"></span>
	</div>
	<!-- 配音播放器 -->
	<div class="dubbing-player cl fixed_div">
		<video id="video_{$attachInfo[tid]}" class="video-js vjs-default-skin vjs-big-play-centered vidoe_wrap">
			<source src="{$attachInfo[video]}" type='video/mp4'>
			<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that<a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
			<!--{if attachInfo['subtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[subtitle]}" srclang="en" id="original" label="{lang zhikai_n5video:lang_068}" default></track>
			<!--{/if}--> 
			<!--{if $attachInfo['tsubtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[tsubtitle]}" srclang="zh" id="translation" label="{lang zhikai_n5video:lang_069}"></track>
			<!--{/if}--> 
		</video>
	</div>
	<!-- 句子列表 -->
	<div id="sutitle_list" class="sentence_wrap">
	</div>
	<!-- 配音预览 -->
	<div class="uk-panel uk-width-1-2 uk-container-center uk-text-center">
		<button id="preview_button" class="preview-button uk-button uk-button-success uk-button-large uk-width-1-1" type="button" disabled>预览发布</button>
	</div>

	<!-- 点击退出时弹出的模态对话框 -->
	<a id="back_dialog_button" class="uk-button" href="#back_dialog" data-uk-modal="{center:true}" style="display: none">Open</a>
	<div id="back_dialog" class="uk-modal">
		<div class="uk-modal-dialog">
			<div class="uk-modal-header">
				<h2 class="uk-text-success">你还没有配音完成，是否继续配音？</h2>
			</div>
			<ul class="uk-nav uk-nav-side uk-text-large">
				<li><a id="back_dialog_continue" href="javascript:void(0)">继续配音</a></li>
				<li class="uk-nav-divider"></li>
				<li><a id="back_dialog_save" href="javascript:void(0)">保存到草稿箱</a></li>
				<li class="uk-nav-divider"></li>
				<li><a id="back_dialog_exitonly" href="javascript:void(0)">直接返回</a></li>
				
			</ul>
		</div>
	</div>
</div>

<!-- 预览界面 -->
<div id="preview_ui" style="visibility: hidden;">
	<div class="preview-player cl fixed_div">
	<!-- 预览播放器 -->
	<video id="video-preview" class="video-js vjs-default-skin vidoe_wrap">
		<source src="{$attachInfo[video]}" type='video/mp4'>
		<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that<a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
		<!--{if attachInfo['subtitle'] != null}-->
		<track kind="subtitles" src="{$attachInfo[subtitle]}" srclang="en" id="original" label="{lang zhikai_n5video:lang_068}" default></track>
		<!--{/if}--> 
		<!--{if $attachInfo['tsubtitle'] != null}-->
		<track kind="subtitles" src="{$attachInfo[tsubtitle]}" srclang="zh" id="translation" label="{lang zhikai_n5video:lang_069}"></track>
		<!--{/if}--> 
	</video>
	</div>
	<!-- 保存混音后的声音 -->
	<div id="audio-dubbing">
	</div>

</div>

<script type="text/javascript">
var jq = jQuery.noConflict();
window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
var audioCtx  = new AudioContext();

///////////////////////////////////////////////////////////////////////////////////////
var videoOptions = {
	poster: '{$attachInfo[cover]}',
	controls: true,
	// 禁用自带来的控制条和播放按钮。
	children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'errorDisplay', 'textTrackSettings', 'resizeManager', 'audioTrackButton'],
	inactivityTimeout: -1, // 不要超时inactive.
};

var startRecordSnd = jq('#startRecordSnd')[0]; // 录音开始提示音。
var player = videojs('video_' + jq('#tid').attr('tid'), videoOptions);
var subtitleInit = false;
var subtitleCount = 0;
var subtitleCurrent = -1;
var sentenceStartTime = 0;
var sentenceEndTime = 0;


// 录音声音
var recordRawData = null; // 存放录音信息，开始和结束时间，mp3帧数据。
var recordPlayer = null; // 录音播放器

// 伴奏声音
var accompanyBuffer = null; // 伴奏解码后声音数据, AudioBuffer类型
var accompanyPlayer = null; // 伴奏播放器
if (jq('#accompany').length > 0) {
	accompanyPlayer = jq('#accompany')[0];

	// 伴奏声音文件加载完成时，解码声音数据到缓存。
	accompanyPlayer.addEventListener("canplaythrough", function() {

		// 请求伴奏声音文件数据。
		// TODO: 有没有办法直接从元素中获取声音数据？
		var request = new XMLHttpRequest();
		request.responseType = "arraybuffer";
		request.open("GET", jq('#accompany').attr('src'), true);

		request.addEventListener("load", function(e) {
			// 解码数据到accompanyBuffer。

			if (audioCtx.decodeAudioData) {
				audioCtx.decodeAudioData(request.response, function(audioBuffer) {
					// 初始化伴奏数据缓存。
					accompanyBuffer = audioBuffer;
				});
			}
		}, false);

		request.send(null);
	}, false);
}

// 配音声音
var dubbingBuffer = null; // 存放伴奏和录音的混合后的声音数据，AudioBuffer类型。
var dubbingPlayer = null; // 伴奏和录音混合好的配音播放器。
dubbingPlayer = jq('#dubbing')[0];


var playStatus = 0; // =0原音播放或暂停中，=1用户录音中，=2回放用户录音中, =3预览中。

var attachInfo; // 存放录音的附件id。

player.on("ready", function(){
	var origTrack = player.textTracks().getTrackById("original");
	var transTrack = player.textTracks().getTrackById("translation");

	// 强制加载所有的字幕。
	if (origTrack != null) {
		origTrack.mode = 'showing';
	}
	
	if (transTrack != null) {
		transTrack.mode = 'showing';
	}
});

player.on("canplay", function(){
	
	if (!subtitleInit) {
		subtitleInit = true;

		// 在句子列表前插入一些空白，使得列表刚好在视频下方出现。
		var elList = jq('.sentence_wrap');
		var oldPadding = (elList.innerWidth() - elList.width()) / 2;
		var newPadding = oldPadding + jq('.dubbing-player').outerHeight() - jq('.n5qj_tbys').outerHeight();
		elList.css('padding-top', newPadding + 'px');

		var origTrack = player.textTracks().getTrackById("original");
		var transTrack = player.textTracks().getTrackById("translation");
		
		// 获取原文、译文和时间段。
		if (origTrack) {
			subtitleCount = origTrack.cues.length;

			// 创建数组，存放录音的附件id。
			attachInfo = {};
			attachInfo['type'] = 'dubbing';
			attachInfo['data'] = {};
			attachInfo['data']['tid'] = jq('#tid').attr('tid');
			attachInfo['data']['record'] = new Array(subtitleCount);
			for (var i = 0; i < subtitleCount; i++){
				attachInfo['data']['record'][i] = "";
			}

			// 创建数组，用于存放录音压缩声音数据。
			recordRawData = new Array(subtitleCount);
			for (var i = 0; i < subtitleCount; i++) {
				var cue = origTrack.cues[i];
				recordRawData[i] = {};
				recordRawData[i]['startTime'] = cue.startTime;
				recordRawData[i]['endTime'] = cue.endTime;
				recordRawData[i]['data'] = null;
			}

			for (var i = 0; i < subtitleCount; i++) {
				var cue = origTrack.cues[i];

				var dom ='<div class="uk-grid data-uk-grid-margin uk-grid-small">'
					+	'<div class="uk-width-1-1 uk-row-first">'
					+		'<div class="uk-panel uk-panel-box" id="sentence_' + i + '" startTime="' + cue.startTime + '" endTime="' + cue.endTime + '">'
					+			'<div class="uk-panel-badge uk-badge">Hot</div>'
					+			'<h3 class="uk-panel-title">' + (i + 1) + '/' + subtitleCount + '</h3>'
					+			'<p style="color:black;">' + cue.text + '</b></p>';

				// 译文
				if (transTrack && transTrack.cues && transTrack.cues[i]) {
					dom +=		'<p>' + transTrack.cues[i].text + '</p>';
				}
				dom +=			'<hr class="uk-article-divider">';
				dom +=			'<div class="uk-grid uk-grid-small">';
				dom +=				'<div class="uk-width-3-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-width-1-1 uk-vertical-align-middle">';
				dom +=						'<div class="uk-progress uk-progress-mini">';
				dom +=							'<div id="record_progress_' + i + '" class="uk-progress-bar" style="width: 0%;"></div>';
				dom +=						'</div>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-vertical-align-middle">';
				dom +=						Math.floor((cue.endTime - cue.startTime) * 100) / 100  + 's';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6">';
				dom +=					'<div class="uk-panel">';
				dom +=						'<button id="play_btn_' + i + '" class="uk-button uk-button-success sentence-play-button" type="button" style="display: none;">';
				dom +=							'<i class="uk-icon-play"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6">';
				dom +=					'<div class="uk-panel">';
				dom +=						'<button id="record_btn_' + i + '" class="uk-button uk-button-success sentence-record-button" type="button"' + (i == 0 ? '>' : ' disabled>');
				dom +=							'<i class="uk-icon-microphone"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div id="audio_data_' + i + '" style="display: none;">'; // 在里存放录音的声音。
				dom +=				'</div>';
				dom +=				'<div id="attach_data_' + i + '" style="display: none;">'; // 在里存放录音的表单数据。
				dom +=				'</div>';
				dom +=			'</div>';

				dom +=		'</div>';
				dom +=	'</div>';
				dom += '</div>';

				jq('#sutitle_list').append(dom);

				// 设置句子的播放和录音回调。
				jq('#play_btn_' + i).click(onPlayBtnClick);
				jq('#record_btn_' + i).click(onRecordBtnClick);
				

			}
		}
		
		if (origTrack) {
			origTrack.mode = 'hidden';
		}
		if (transTrack) {
			transTrack.mode = 'hidden';
		}

		// 更新播放时间。
		jq('.vjs-current-time .vjs-icon-placeholder').html(getTimeString(0));
		jq('.vjs-duration-time .vjs-icon-placeholder').html(getTimeString(player.duration()));

		// 定位于列表开始。
		UIkit.Utils.scrollToElement(jq('#sentence_0'), {
			offset: $('#sentence_0').offset().top
		});

		// 句子列表尾部也填充空白，使得最后一句可以滚动到视频下面。
		if (subtitleCount > 1) {
			jq('#pagebottom').css('padding-bottom', $('#sentence_' + (subtitleCount - 2)).outerHeight() + 'px');
		}

		// 切换到第一条句子开始播放。
		sentencePlay(0);

		// 监听触屏拖动。
		dragSwitchSentence.init();
	}
});

// 添加自定义的播放元素，点击视频时暂停和播放视频。
function dummyBigPlayBtnPlugin(options) {

	// 顶部条
	var elTopBar = document.createElement('div');
	elTopBar.className = 'vjs-top-bar';
	player.el().appendChild(elTopBar);

	var elControlPanel = document.createElement('div');
	elControlPanel.className = 'vjs-control-panel';

	// 顶部中间的标题
	var elHeadTitel = document.createElement('div');
	elHeadTitel.className = 'vjs-head-title';
	elHeadTitel.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">{$attachInfo[subject]}</span>';
	elControlPanel.appendChild(elHeadTitel);

	// 底部状态条
	var elStatusBar = document.createElement('div');
	elStatusBar.className = 'vjs-status-bar';
	elControlPanel.appendChild(elStatusBar);

	// 底部左侧当前时间
	var elCurrentTime = document.createElement('div');
	elCurrentTime.className = 'vjs-current-time';
	elCurrentTime.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">00:00</span>';
	elStatusBar.appendChild(elCurrentTime);

	// 底部右侧总时间
	var elDurationTime = document.createElement('div');
	elDurationTime.className = 'vjs-duration-time';
	elDurationTime.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">00:00</span>';
	elStatusBar.appendChild(elDurationTime);

	// 底部中央进度条
	var elProcessBar = document.createElement('div');
	elProcessBar.className = 'vjs-process-bar';
	elProcessBar.innerHTML = '<div class="uk-progress uk-progress-success"><div class="uk-progress-bar" style="width: 0%;"></div></div>';
	elStatusBar.appendChild(elProcessBar);

	// 居中的播放按钮
	var elPlayNormalBtn = document.createElement('div');
	elPlayNormalBtn.className = 'vjs-round-play-button vjs-play-normal';
	elPlayNormalBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlayNormalBtn);
	elPlayNormalBtn.onclick = function (e) {
		onUserActive();
		player.userActivity_ = false;
	};

	// 较慢速播放按钮
	var elPlaySlowerBtn = document.createElement('div');
	elPlaySlowerBtn.className = 'vjs-round-play-button vjs-play-slower';
	elPlaySlowerBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlaySlowerBtn);
	elPlaySlowerBtn.onclick = function (e) {
		onUserActive();
		player.playbackRate(0.75);
		player.userActivity_ = false;
	};

	// 最慢速播放按钮
	var elPlaySlowestBtn = document.createElement('div');
	elPlaySlowestBtn.className = 'vjs-round-play-button vjs-play-slowest';
	elPlaySlowestBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlaySlowestBtn);
	elPlaySlowestBtn.onclick = function (e) {
		onUserActive();
		player.playbackRate(0.5);
		player.userActivity_ = false;
	};

	player.el().appendChild(elControlPanel);

};
videojs.registerPlugin('dummyBigPlayBtnPlugin', dummyBigPlayBtnPlugin);
player.dummyBigPlayBtnPlugin({});

////////////////////////////////////////////////////////
// 顶部左边返回按钮
jq('.dubbing-back-button').click(function(event) {
	var haveData = false;
	
	for (var i = 0; i < subtitleCount; i++){
		if (attachInfo['data']['record'][i] != "") {
			haveData = true;
			break;
		}
	}

	if (haveData) {
		jq('#back_dialog_button').click();
	}
	else {
		history.back(-1);
	}
});

// 继续配音
jq('#back_dialog_continue').click(function(event){
	var modal = UIkit.modal("#back_dialog");

	if (modal.isActive()) {
		modal.hide();
	}
});

// 保存草稿并退出。
jq('#back_dialog_save').click(function(event){
	var modal = UIkit.modal("#back_dialog");

	if (modal.isActive()) {
		modal.hide();
	}
	
	jq('#postsave').val(1); // 草稿方式保存。
	jq('#postsubmit').click();
});

// 仅退出配音界面
jq('#back_dialog_exitonly').click(function(event){
	var aidsUrl = '';
	var haveData = false;
	var modal = UIkit.modal("#back_dialog");

	if (modal.isActive()) {
		modal.hide();
	}

	// 找出已经提交的附件。
	for (var i = 0, j = 0; i < subtitleCount; i++) {
		if (attachInfo['data']['record'][i] != "") {
			haveData = true;
			aidsUrl += '&aids[]=' + attachInfo['data']['record'][i];
			attachInfo['data']['record'][i] = '';
		}
	}

	// 删除提交的附件。
	if (haveData) {
		$.ajax({
			type:'GET',
			url:'forum.php?mod=ajax&action=deleteattach&inajax=yes' + aidsUrl,
		})
		.success(function(s) {
			for (var i = 0, j = 0; i < subtitleCount; i++) {
				if (attachInfo['data']['record'][i] != "") {
					attachInfo['data']['record'][i] = '';
				}
			}
			history.back(-1);
		})
		.error(function() {
			popup.open('{lang networkerror}', 'alert');
		});
	}
	else {
		history.back(-1);
	}
});

///////////////////////////////////////////////////////////////
// 点击视频时，暂停和播放视频。
function onUserActive() {
	if (playStatus == 0) {
		if (jq(".vjs-control-panel").css("display") == "block") {
			console.log("userinactive");

			// 恢复播放并隐藏面板
			player.muted(false);
			player.playbackRate(1);
			player.play();
			jq(".vjs-control-panel").css("display","none");
		}
		else {
			console.log("useractive");

			//点击屏幕后暂停并显示面板
			player.pause();
			jq(".vjs-control-panel").css("display","block");
		}
	}
}

player.userActive(false);
player.on("useractive", onUserActive);
player.on("userinactive", onUserActive);

// 停止录音或录音回放。
function stopRecordOrPlay()
{
	if (playStatus == 1) {
		// 停止播放视频和录音。
		onStopRecord();
	}
	else if (playStatus == 2) {
		// 录音回放完毕，停止播放。
		player.pause();

		jq(".vjs-control-panel").css("display","block");

		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}
		if (recordPlayer != null) {
			recordPlayer.pause();
		}
		playStatus = 0;
	}
}

// 格式化时间字符串。
function getTimeString(seconds) {
	var h = parseInt(seconds / 3600);
	var m = parseInt((seconds - (h * 3600)) / 60);
	var s = parseInt(seconds - ((h * 3600) + m * 60));

	var strTime = '';
	if (h > 0) {
		strTime += (h < 10 ? '0' + h : h) + ':';
	}
	strTime += (m < 10 ? '0' + m : m) + ':';
	strTime += (s < 10 ? '0' + s : s);

	return strTime;
}

// 播放器时间更新回调。
player.on('timeupdate', function() {
	// 限制视频播放区间。
	if (player.currentTime() >= sentenceEndTime) {
		player.currentTime(sentenceStartTime);
		stopRecordOrPlay();
	}

	// 更新播放进度，当前时间。
	jq('.vjs-control-panel .uk-progress-bar').css('width', ' ' + (player.currentTime() * 100 / player.duration()) + '%')
	jq('.vjs-current-time .vjs-icon-placeholder').html(getTimeString(player.currentTime()));
});

// 设置播放区间到句子的时间范围内。
var sentenceTimer = null;
function sentencePlay(index) {
	//console.log("sentencePlay:", index);

	if (index != subtitleCurrent) {
		//console.log("sentence new:", index);

		// 切换句子之前关闭录音和录音回放。
		bPlayAfterRecord = false;
		stopRecordOrPlay();

		// 等待录音完成后，才能切换。因为保存录音是在一个后台work中，
		// 不等待保存录音就切换，录音会保存到切换后的句子上。
		// 使用定时器的方法来轮询录音状态，只在录音完成后，才执行真正的句子切换。
		if (sentenceTimer != null) {
			window.clearInterval(sentenceTimer);
			sentenceTimer = null;
		}
		sentenceTimer = window.setInterval(function(){
			if (!isRecordStart) {
				//console.log("record has done.")
				window.clearInterval(sentenceTimer);
				sentenceTimer = null;
				
				// 禁用之前句子的录音按钮，并使能当前句子的录音按钮。
				$('#record_btn_' + subtitleCurrent).attr('disabled', '1');
				subtitleCurrent = index;
				$('#record_btn_' + subtitleCurrent).removeAttr('disabled');

				// 播放视频
				sentenceStartTime = $('#sentence_' + subtitleCurrent).attr('startTime');
				sentenceEndTime = $('#sentence_' + subtitleCurrent).attr('endTime');
				player.currentTime(sentenceStartTime);
				player.muted(false);
				player.playbackRate(1);
				player.play();
				jq(".vjs-control-panel").css("display","none");
			}
			else {
				//console.log("record hasn't done.")
			}
		}, 100);
	}
}

///////////////////////////////////////////////////////////////////////////////////
// 句子列表滚动

// 监听触屏：结束拖动名子列表时，切换句子。
var dragSwitchSentence = {
	isInTouch : false,
	isInScroll : false,

	pos : {},
	status : false,

	onTouchStart : function(e) {
		//console.log('touchstart');
		var _self = dragSwitchSentence;

		e = mygetnativeevent(e);
		_self.pos.startx = e.touches[0].clientX;
		_self.pos.starty = e.touches[0].clientY;
		_self.isInTouch = true;
	},

	onTouchMove : function(e) {
		//console.log('touchmove');
		var _self = dragSwitchSentence;

		e = mygetnativeevent(e);
		_self.pos.curposx = e.touches[0].clientX;
		_self.pos.curposy = e.touches[0].clientY;

		// 垂直方向移动距离超过50，确认开始滚动。
		var pullheight = _self.pos.curposy - _self.pos.starty;
		if (!_self.status && Math.abs(pullheight) > 50) {
			_self.status = true;

			// 拖动开始，停止录音和录音回放。
			stopRecordOrPlay();
		}
	},

	onTouchEnd : function(e) {
		//console.log('touchend');
		var _self = dragSwitchSentence;

		_self.isInTouch = false;

		// 拖动结束，准备切换句子。
		if (_self.pos.curposy != _self.pos.starty){
			_self.onScrollStop();
		}

		_self.status = false;
		_self.pos = {};
	},

	// 滚动结束事件处理
	// 句子列表滚动结束后进行对齐和切换当前句子。
	onScrollStop : function(e) {
		//console.log('onScrollStop');
		var _self = dragSwitchSentence;

		if (_self.isInScroll) {
			_self.isInScroll = false;
		}

		if (!_self.isInTouch && subtitleCount > 0) {
			var x, h;
			var i;
			var top = $('#sentence_0').offset().top;
			var align = $(window).scrollTop() + top;

			for (i = 0; i < subtitleCount; i++) {
				x = $('#sentence_' + i).offset().top;
				h = $('#sentence_' + i).outerHeight();

				if (align >= x && align < (x + h)) {

					if (align <= x + h / 2) {
						// 向上对齐当前
						UIkit.Utils.scrollToElement(jq('#sentence_' + i), {
							offset: top
						});
						
						sentencePlay(i);
					}
					else {
						// 向下对齐下一个
						if (i < (subtitleCount - 1)) {
							UIkit.Utils.scrollToElement(jq('#sentence_' + (i + 1)), {
								offset: top
							});
						}
						
						sentencePlay(i + 1);
					}

					break;
				}
			}
		}
	},
	
	init : function() {
		jq('body').on('touchstart', this.onTouchStart)
		.on('touchmove', this.onTouchMove)
		.on('touchend', this.onTouchEnd);

		// 监听滚动事件，在滚动结束时处理。
		var scrollTimer = null;
		document.onscroll = function() {
			//console.log('scroll');
			if (dragSwitchSentence.isInTouch) {
				return;
			}
			dragSwitchSentence.isInScroll = true;

			if (scrollTimer != null){
			   window.clearTimeout(scrollTimer);
			}

			window.canAutoScroll = false;
			//500ms后，假定认为停止滚动
			scrollTimer = window.setTimeout(function() {
				dragSwitchSentence.isInScroll = false;
				dragSwitchSentence.onScrollStop();
			}, 500);
		}
	},
	
	deinit : function() {
		jq('body').off('touchend', this.onTouchEnd);
		jq('body').off('touchmove', this.onTouchMove);
		jq('body').off('touchstart', this.onTouchStart);
		document.onscroll = null;
	} 
};

////////////////////////////////////////////////////////////////
// 录音
var isRecordStart = false;
var bPlayAfterRecord = false;
var waitRecordStopTimer = null;

function uploadCallback(data) {
	if (data.indexOf('DISCUZUPLOAD') > -1) {
		var arr = data.split('|');
		if (arr[1] == 0) {
			// 记录上传文件的附件ID。
			attachInfo['data']['record'][subtitleCurrent] = arr[2];

			// 更新帖子正文中的标记。
			jq('#needmessage').val('[dubbing]' + JSON.stringify(attachInfo) + '[/dubbing]');

			// 附件提交的表单数据，表单中至少有一个attachnew['附件ID'][xxx]的表单项，
			// 提交后附件ID对应的附件才会被视为已使用附件。
			// 表单项的内容只是简单的填充一个字符串，暂时未使用。
			jq('#attach_data_' + subtitleCurrent).html('').
				append('<input type="text" value="record' + subtitleCurrent + '" name="attachnew['+ arr[2] +'][description]"/>');

			// 使能预览按钮。
			jq('#preview_button').removeAttr('disabled');

			// 充许提交贴子。
			needsubject = true; // 在post.php中定义。
			needmessage = true;
			$('.btn_pn').removeClass('btn_pn_grey').addClass('btn_pn_blue');
			$('.btn_pn').attr('disable', 'false');
		}
		else if (lang_msg[arr[1]] != undefined ) {
			// 出错，显示出错原因。
			var sizelimit = '';
			if(arr[8] == 'ban') {
				sizelimit = '{lang uploadpicatttypeban}';
			} else if(arr[8] == 'perday') {
				sizelimit = '{lang donotcross}'+Math.ceil(arr[8]/1024)+'K)';
			} else if(arr[8] > 0) {
				sizelimit = '{lang donotcross}'+Math.ceil(arr[8]/1024)+'K)';
			}
			popup.open(lang_msg[arr[1]] + sizelimit, 'alert');
		}
	}
	else {
		if (data) {
			popup.open(lang_msg[data], 'alert');
		}
	}
}

//唯一影响mp3文件大小的参数为 bitRate
//sampleRate 仅供特殊需求的人使用
var recorder = new MP3Recorder({
	WORKER_PATH: 'source/plugin/zhikai_n5video/mp3-recorder/recorder-worker.js',
	//numChannels: 1,     //声道数,默认为1
	//sampleRate: 8000,   //采样率,一般由设备提供,比如 48000
	bitRate: 128,//64,        //比特率,不要低于64,否则可能录制无声音（人声）

	// 录音结束事件, data中返回的是一个Array数组，
	// 数组的每个元素是Ini8Array来存放一个mp3帧数据。
	complete: function (data, type) {
		var blob = new Blob(data, { type: type });
		if (blob.size > 0) {
			var url = URL.createObjectURL(blob);
			var mp3Name = 'recording_' + Date.now() + '.mp3';

			// 保存句子声音数据
			jq('#audio_data_' + subtitleCurrent).html('').
				append('<a href="' + url + '" download="' + mp3Name + '">' + mp3Name + '</a>').
				append('<audio controls src="' + url + '" id="record_audio_' + subtitleCurrent + '"></audio>');

			// 将录音mp3数据转成ArrayBuffer，并保存到recordRawData。
			// 用于最终的伴奏和录音的合并。
			var length = 0;
			for (var i = 0; i < data.length; i++) {
				length += data[i].length;
			}
			var buffer = new ArrayBuffer(length);
			var dstData = new Int8Array(buffer);
			for (var i = 0, offset = 0; i < data.length; i++) {
				dstData.set(data[i], offset);
				offset += data[i].length;
			}
			recordRawData[subtitleCurrent]['data'] = buffer;

			// 上传服务器，录音数据比较小，所以一次上传不用分块。
			var form = new FormData();
			form.append("file_data", blob);
			form.append("file_name", mp3Name);
			form.append("file_total", 1)
			form.append("file_index", 1);
			form.append("file_size", blob.size);
			form.append("file_id", parseInt(Math.random() * 9999 + 10001)); // 随机id，100001~19999

			var xhr = new XMLHttpRequest();
			var uploadUrl = 'plugin.php?id=zhikai_n5video:upload&fid={$_G[fid]}&uid={$_G[uid]}&hash={$upfhash}';
			xhr.open("POST", uploadUrl, true);
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4 && xhr.status == 200) {
					uploadCallback(xhr.responseText);
					// TODO: 录音打分。
				}
			}
			xhr.send(form);

			// 显示句子播放按钮
			jq('#play_btn_' + subtitleCurrent).css('display', 'inline-block');

			// 录音完成。
			isRecordStart = false;

			if (bPlayAfterRecord) {
				// 录完后自动播放用户的录音。
				var sentence = jq('#sentence_' + subtitleCurrent);
				var event = {data: {index: subtitleCurrent, startTime: sentence.attr('startTime'), endTime: sentence.attr('endTime')}};
				jq('#play_btn_' + subtitleCurrent).trigger('click', event);
			}
			else {
				playStatus = 0;
			}
		}

	},

	error: function (data) {
		console.log("encode error.");
	}
});


// 录音时间到结束录音
function onStopRecord() {
	if (isRecordStart) {
		// 停止视频播放
		player.pause();

		//停止录音，触发complete()。
		recorder.stop();

		var elem = jq('#record_progress_' + subtitleCurrent);
		if (bPlayAfterRecord) {
			// 录音正常结束，进度条动画在100%位置停止。
			elem.css('transition', 'width 0s linear');
			elem.css('width', '100%');
		}
		else {
			// 录音被中断，进度条动画在当前位置停止。
			elem.css('transition', 'width 0s linear');
			elem.css('width', ' ' + elem[0].offsetWidth + 'px');
		}
	}
}

//输出错误信息
function writeError(msg) {
	console.log(msg);
}

if (!recorder.support) writeError("您的浏览器不支持HTML5录音！");

function onRecordStart() {
	if (playStatus == 1) {
		//提示音结束后开始录音和播放视频（已经静音）
		recorder.start(function () {
			// 开始录音动画
			jq('#record_progress_' + subtitleCurrent).css('transition', 'width ' + (sentenceEndTime - sentenceStartTime) + 's linear');
			jq('#record_progress_' + subtitleCurrent).css('width', '100%');

			player.playbackRate(1);
			player.play();
		}, function (e) {
			switch (e.code || e.name) {
				case 'PERMISSION_DENIED':
				case 'PermissionDeniedError':
					writeError('用户拒绝提供设备。');
					break;
				case 'NOT_SUPPORTED_ERROR':
				case 'NotSupportedError':
					writeError('浏览器不支持硬件设备。');
					break;
				case 'MANDATORY_UNSATISFIED_ERROR':
				case 'MandatoryUnsatisfiedError':
					writeError('无法发现指定的硬件设备。');
					break;
				default:
					writeError('无法打开麦克风。异常信息:' + (e.code || e.name));
					break;
			}
		});
	}
}
startRecordSnd.addEventListener('ended', onRecordStart, false);

// 当前句子录音按钮按下
function onRecordBtnClick(event) {
	if (!recorder.support) return;

	if (!isRecordStart) {
		isRecordStart = true;
		bPlayAfterRecord = true;
		playStatus = 1;

		// 隐藏播放按钮。
		jq('#play_btn_' + subtitleCurrent).css('display', 'none');

		// 让视频静音播放。
		player.currentTime(sentenceStartTime);
		player.muted(true);
		jq(".vjs-control-panel").css("display","none");

		// 停止伴奏。
		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}

		// 复位录音进度条。
		jq('#record_progress_' + subtitleCurrent).css('transition', 'width 0s');
		jq('#record_progress_' + subtitleCurrent).css('width', '0%');

		// 删除之前上传的录音附件。
		if (attachInfo['data']['record'][subtitleCurrent] != null) {
			var aid = attachInfo['data']['record'][subtitleCurrent];
			$.ajax({
				type:'GET',
				url:'forum.php?mod=ajax&action=deleteattach&inajax=yes&aids[]=' + aid,
			})
			.success(function(s) {
			})
			.error(function() {
				popup.open('{lang networkerror}', 'alert');
			});

			attachInfo['data']['record'][subtitleCurrent] = null;
		}

		// 播放提示音,时长100ms,播放完成开始录音。
		startRecordSnd.play();
	} else {
		//停止录音
		bPlayAfterRecord = false;
		onStopRecord();

		if (waitRecordStopTimer != null) {
			window.clearInterval(waitRecordStopTimer);
		}

		// 等待录音完成，再开始新的录音。
		waitRecordStopTimer = window.setInterval(function(){
			if (!isRecordStart) {
				//console.log("record has done.")
				window.clearInterval(waitRecordStopTimer);
				waitRecordStopTimer = null;

				onRecordBtnClick();
			}
			else {
				//console.log("record hasn't done.")
			}
		}, 100);
		
	}
}

// 当前句子录音回放按钮按下
function onPlayBtnClick(event) {
	//console.log("record playback.")
	playStatus = 2;

	// 让视频静音播放，并隐藏大播放按钮和控制条
	player.currentTime(sentenceStartTime);
	player.muted(true);
	jq(".vjs-control-panel").css("display","none");

	// 播放用户录音。
	recordPlayer = jq('#record_audio_' + subtitleCurrent)[0]; // 将jquery对象转换成js对象
	recordPlayer.currentTime = 0;

	// 重新播放伴奏和录音。
	if (accompanyPlayer != null) {
		accompanyPlayer.currentTime = sentenceStartTime;
		accompanyPlayer.play();
	}
	recordPlayer.play();
	player.playbackRate(1);
	player.play();
}

////////////////////////////////////////////////////////////////////////////
// 预览部分
var previewVideoOptions = {
	poster: '{$attachInfo[cover]}',
	controls: true,
	// 禁用自带来的控制条和播放按钮。
	children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'errorDisplay', 'textTrackSettings', 'resizeManager', 'audioTrackButton'],
	inactivityTimeout: 5000, // 在active状态会显示控制面板，用户5秒不操作视频，进入inactive收起控制面板。
};

var previewPlayer = videojs('video-preview', previewVideoOptions);
var stopRecTimer = null; // 等待录音完成的定时器。
var previewSeekBar = null; // 进度条
var previewInit = false;

// 返回合并buffer1和buffer2的声音数据。
function mergeAudioBuffer(context, buffer1, buffer2) {
	if (buffer1.sampleRate != buffer2.sampleRate) {
		// TODO: support resample.
		return;
	}

	var sampleRate = Math.min(buffer1.sampleRate, buffer2.sampleRate);
	var length = Math.max(buffer1.length, buffer2.length);
	var channelCount = Math.max(buffer1.numberOfChannels, buffer2.numberOfChannels);
	var dstAudioBuffer = context.createBuffer(channelCount, length, sampleRate);

	// 合并左声道
	var srcData1 = buffer1.getChannelData(0);
	var srcData2 = buffer2.getChannelData(0);
	var dstData = dstAudioBuffer.getChannelData(0);

	var src1 = new Float32Array(srcData1);
	var src2 = new Float32Array(srcData2);
	var dst = new Float32Array(dstData);
	var count = Math.min(src1.length, src2.length);

	for (i = 0; i < count; i++) {
		dst[i] = (src1[i] + src2[i]) / 2;
	}
	if (src1.length > src2.length) {
		dst.set(src1.subarray(i), i);
	}
	else if (src1.length < src2.length) {
		dst.set(src2.subarray(i), i);
	}
	dstAudioBuffer.copyToChannel (dst, 0, 0);

	// 合并右声道
	if (dstAudioBuffer.numberOfChannels > 1) {
		srcData1 = buffer1.numberOfChannels > 1 ? buffer1.getChannelData(1) : null;
		srcData2 = buffer2.numberOfChannels > 1 ? buffer2.getChannelData(1) : null;
		dstData = dstAudioBuffer.numberOfChannels > 1 ? dstAudioBuffer.getChannelData(1) : null;
		
		src1 = srcData1 == null ? null : new Float32Array(srcData1);
		src2 = srcData2 == null ? null : new Float32Array(srcData2);
		dst = new Float32Array(dstData);
		
		if (src1 != null && src2 != null) {
			count = Math.min(src1.length, src2.length);
			for (i = 0; i < count; i++) {
				dst[i] = (src1[i] + src2[i]) / 2;
			}
			if (src1.length > src2.length) {
				dst.set(src1.subarray(i), i);
			}
			else if (src1.length < src2.length) {
				dst.set(src2.subarray(i), i);
			}
		}
		else if (src1 != null) {
			dst.set(src1);
		}
		else if (src2 != null) {
			dst.set(src2);
		}
		dstAudioBuffer.copyToChannel (dst, 1, 0);
	}

	return dstAudioBuffer;
}

// 将buffer2合并到buffer1，开始合并时间为startTime。
// 合并后buffer1的时长不会改变，超出的部分会丢弃。
function mixAudioBuffer(context, buffer1, buffer2, startTime) {
	if (buffer1.sampleRate != buffer2.sampleRate) {
		// TODO: support resample.
		return;
	}

	var sampleRate = Math.min(buffer1.sampleRate, buffer2.sampleRate);
	var offset = Math.floor(startTime * buffer1.sampleRate);
	var length = Math.max(buffer1.length, offset + buffer2.length);
	var channelCount = Math.max(buffer1.numberOfChannels, buffer2.numberOfChannels);
	var dstAudioBuffer = context.createBuffer(channelCount, length, sampleRate);

	// 合并左声道
	var srcData1 = buffer1.getChannelData(0);
	var srcData2 = buffer2.getChannelData(0);

	var src1 = new Float32Array(srcData1);
	var src2 = new Float32Array(srcData2);
	var count = Math.min(src1.length - offset, src2.length);

	// 合并重合的数据
	for (var i = offset, j = 0; j < count; i++, j++) {
		src1[i] = (src1[i] + src2[j]) / 2;
	}
	buffer1.copyToChannel(src1, 0, 0);

	// 合并右声道
	if (buffer1.numberOfChannels > 1 && buffer2.numberOfChannels > 1) {
		srcData1 = buffer1.getChannelData(1);
		srcData2 = buffer2.getChannelData(1);

		src1 = new Float32Array(srcData1);
		src2 = new Float32Array(srcData2);
		count = Math.min(src1.length - offset, src2.length);

		// 合并重合的数据
		for (var i = offset, j = 0; j < count; i++, j++) {
			src1[i] = (src1[i] + src2[j]) / 2;
		}
		buffer1.copyToChannel(src1, 1, 0);
	}
}

function mergeRecord2Commpany()
{
	// 先混合伴奏。
	dubbingBuffer = audioCtx.createBuffer(accompanyBuffer.numberOfChannels, accompanyBuffer.length, accompanyBuffer.sampleRate);
	dubbingBuffer.copyToChannel(accompanyBuffer.getChannelData(0), 0, 0);
	if (accompanyBuffer.numberOfChannels > 1) {
		dubbingBuffer.copyToChannel(accompanyBuffer.getChannelData(1), 1, 0);
	}

	var i = 0;
	function mergeStack() {
		// 是否还有要混合的录音。
		if (recordRawData.hasOwnProperty(i)) {
			// 解码录音并混合到伴奏中。
			if (recordRawData[i]['data'] != null) {
				audioCtx.decodeAudioData(recordRawData[i]['data'], function(audioBuffer) {
					mixAudioBuffer(audioCtx, dubbingBuffer, audioBuffer, recordRawData[i]['startTime']);

					i++;
					mergeStack();
				});
			}
			else {
				i++;
				mergeStack();
			}
		}
		else {
			// for test.
			//var source = audioCtx.createBufferSource();
			//source.buffer = dubbingBuffer;
			//source.connect(audioCtx.destination);
			//source.start();
			
			// 全部混合完成后，先将audiobuffer转成wav数据存放在ArrayBuffer中。
			// 并产生<audio>供用户预览使用。这样是为了尽快给用户提供能播放的
			// 声音用于预览。然后在后台进行耗时的mp3格式编码，用户确认时，
			// 编码应该早就结束了，这里就可以立即上传mp3格式的声音到服务器。
			
			// 转wav格式。
			var wav = new WAVEncoder({float32: 1});
			var wavArrayBuffer = wav.encode(dubbingBuffer);

			var blob = new Blob([wavArrayBuffer], { type: 'audio/wav' });
			if (blob.size > 0) {
				var url = URL.createObjectURL(blob);
				var wavName = 'dubbing_' + Date.now() + '.wav';

				// 绑定声音
				dubbingPlayer.src = url;

				// 生成audio界面元素。
				jq('#audio-mixer').html('').
					append('<a href="' + url + '" download="' + wavName + '">' + wavName + '</a>').
					append('<audio controls src="' + url + '" id="dubbing_wav"></audio>');

				// 在后台编码成mp3格式。
				var encoder = new MP3Encoder({
					WORKER_PATH: 'source/plugin/zhikai_n5video/mp3-recorder/recorder-worker.js',
					bitRate: 128,//64,        //比特率,不要低于64,否则可能录制无声音（人声）

					complete: function (data, type) {
						var blob = new Blob(data, { type: type });
						if (blob.size > 0) {
							var url = URL.createObjectURL(blob);
							var mp3Name = 'dubbing_' + Date.now() + '.mp3';

							// 生成audio界面元素。
							jq('#audio-mixer').
								append('<a href="' + url + '" download="' + mp3Name + '">' + mp3Name + '</a>').
								append('<audio controls src="' + url + '" id="dubbing_mp3"></audio>');

						}

					},

					error: function (data) {
						console.log("mp3 encode error.");
					}
				});
				encoder.encode(dubbingBuffer);

			}
			else {
				console.log("encode wave error.");
			}

		}
	}
	
	// 开始混合录音。
	mergeStack();

}
jq('#preview_button').click(function(e){

	// 切换之前关闭录音和录音回放。
	bPlayAfterRecord = false;
	stopRecordOrPlay();

	// 等待录音完成后，才能切换，因为保存录音是在一个后台work中。
	if (stopRecTimer != null) {
		window.clearInterval(stopRecTimer);
		stopRecTimer = null;
	}
	stopRecTimer = window.setInterval(function(){
		if (!isRecordStart) {
			//console.log("record has done.")
			window.clearInterval(stopRecTimer);
			stopRecTimer = null;

			// 不处理句子列表的滚动。
			dragSwitchSentence.deinit();

			// 不让屏幕可以滚动。
			jq('html').addClass("uk-modal-page");

			// 暂停播放
			player.pause();
			jq(".vjs-control-panel").css("display","block");
			if (accompanyPlayer != null) {
				accompanyPlayer.pause();
			}
			if (recordPlayer != null) {
				recordPlayer.pause();
			}
			playStatus = 3;

			// 生成合并声音。
			mergeRecord2Commpany();

			previewPlayer.muted(true);
			previewPlayer.pause();
			dubbingPlayer.pause()

			// 切换到预览界面。
			jq('#dubbing_ui').css('visibility', 'hidden');
			jq('#preview_ui').css('visibility', 'visible');
		}
		else {
			//console.log("record hasn't done.")
		}
	}, 100);
});

// 添加自定义的播放元素，点击视频时暂停和播放视频。
function previewPlayBtnPlugin(options) {
	var elTop = document.createElement('div');
	elTop.className = 'zyh-preview-top';

	// 顶部条
	var elTopBar = document.createElement('div');
	elTopBar.className = 'zyh-preview-top-bar';

	// 顶部左边返回按钮
	var elBackButton = document.createElement('div');
	elBackButton.className = 'zyh-preview-back-button';
	elBackButton.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder uk-icon-angle-left"></span>';
	elTopBar.appendChild(elBackButton);
	elBackButton.onclick = function (e) {
		// 切换回配音界面。
		previewPlayer.pause();
		dubbingPlayer.pause();
		jq('#dubbing_ui').css('visibility', 'visible');
		jq('#preview_ui').css('visibility', 'hidden');
		dragSwitchSentence.init();
		jq('html').removeClass("uk-modal-page");
		playStatus = 0;
	};

	// 右上角菜单按钮
	var elMenuButton = document.createElement('div');
	elMenuButton.className = 'zyh-preview-menu-button';
	elMenuButton.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elTopBar.appendChild(elMenuButton);

	// 顶部中间的标题
	var elHeadTitel = document.createElement('div');
	elHeadTitel.className = 'zyh-preview-head-title';
	elHeadTitel.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">{$attachInfo[subject]}</span>';
	elTopBar.appendChild(elHeadTitel);

	var elBottom = document.createElement('div');
	elBottom.className = 'zyh-preview-bottom';

	// 底部条
	var elBottomBar = document.createElement('div');
	elBottomBar.className = 'zyh-preview-bottom-bar';

	// 底部中央进度条
	var elSeekBar = document.createElement('div');
	elSeekBar.className = 'zyh-preview-seekbar';
	elBottomBar.appendChild(elSeekBar);

	// 底部左侧当前时间
	var elCurrentTime = document.createElement('div');
	elCurrentTime.className = 'zyh-preview-current-time';
	elCurrentTime.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elCurrentTime);

	// 底部右侧全屏
	var elFullScreen = document.createElement('div');
	elFullScreen.className = 'zyh-preview-fullscreen';
	elFullScreen.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elBottomBar.appendChild(elFullScreen);
	elFullScreen.onclick = function (e) {
		if (previewPlayer.isFullscreen()) {
			previewPlayer.exitFullscreen();
		}
		else {
			previewPlayer.requestFullscreen();
		}
	};

	// 底部右侧总时间
	var elDurationTime = document.createElement('div');
	elDurationTime.className = 'zyh-preview-duration-time';
	elDurationTime.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elDurationTime);

	// 居中的播放按钮
	var elPlayNormalBtn = document.createElement('div');
	elPlayNormalBtn.className = 'zyh-preview-play-normal zyh-round-play-button';
	elPlayNormalBtn.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elPlayNormalBtn.onclick = function (e) {
		if (previewPlayer.userActive() || !previewPlayer.hasStarted()) {
			if (previewPlayer.paused()) {
				previewPlayer.play();
			}
			else {
				previewPlayer.pause();
			}
		}
	};

	elTop.appendChild(elTopBar);
	elBottom.appendChild(elBottomBar);
	previewPlayer.el().appendChild(elPlayNormalBtn);
	previewPlayer.el().appendChild(elTop);
	previewPlayer.el().appendChild(elBottom);
};

videojs.registerPlugin('previewPlayBtnPlugin', previewPlayBtnPlugin);
previewPlayer.previewPlayBtnPlugin({});

previewPlayer.userActive(false);
//////////////////////////////////
// 下面这一段用来保持声音和画面同步。

// 开始或恢复播放
previewPlayer.on("play", function() {
	dubbingPlayer.play()
});

// 暂停播放
previewPlayer.on("pause", function() {
	dubbingPlayer.pause()
});

// 视频跳转
previewPlayer.on("seeked", function() {
	dubbingPlayer.currentTime = previewPlayer.currentTime();
});

//调整音量
previewPlayer.on('volumechange', function() {
	dubbingPlayer.volume = previewPlayer.volume();
});

// 播放结束
previewPlayer.on('timeupdate', function () {
	if (previewPlayer.duration() != 0 && previewPlayer.currentTime() == previewPlayer.duration()) {
		dubbingPlayer.currentTime = 0;
		dubbingPlayer.pause();
	}
});
////////////////////////////////////

// 播放器时间更新回调。
previewPlayer.on('timeupdate', function() {
	// 更新播放进度，当前时间。
	previewSeekBar.setValue(previewPlayer.currentTime());
	
	jq('.zyh-preview-process-bar .uk-progress-bar').css('width', ' ' + (previewPlayer.currentTime() * 100 / previewPlayer.duration()) + '%')
	jq('.zyh-preview-current-time .zyh-icon-placeholder').html(getTimeString(previewPlayer.currentTime()));
});


previewPlayer.on("canplay", function() {
	if (!previewInit) {
		previewInit = true;

		// 初始化播放时间。
		jq('.zyh-preview-current-time .zyh-icon-placeholder').html(getTimeString(0));
		jq('.zyh-preview-duration-time .zyh-icon-placeholder').html(getTimeString(previewPlayer.duration()));

		// 初始化进度条
		previewSeekBar = new Seekbar.Seekbar({
			renderTo: ".zyh-preview-seekbar",
			minValue: 0, maxValue: previewPlayer.duration(),
			valueListener: function (value) {
				previewPlayer.currentTime(value);
				previewPlayer.reportUserActivity(null);
			},
			thumbColor: '#82bb42',
			negativeColor: '#82bb42',
			positiveColor: '#CCC',
			value: 0
		});
	}
});
</script>


<!--{/block}-->