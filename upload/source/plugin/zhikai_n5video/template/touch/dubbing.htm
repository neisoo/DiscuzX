<!--{block file}-->
<link href="source/plugin/zhikai_n5video/static/css/style.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/static/css/jquery.seekbar.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/uikit.docs.min.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/components/progress.css " rel="stylesheet" />
<link rel="stylesheet" href="source/plugin/zhikai_n5video/video-js/video-js.min.css">

<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.shardupload.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.seekbar.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/audioSourcePlayer.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/uikit/js/uikit.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/video-js/video.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/cordova/cordova.js"></script>

<style>

::cue {
	background: none;
	color: #fff;
	text-shadow: 0 1px #000, 1px 0 #000, -1px 0 #000, 0 -1px #000;
	font-size: medium;
}
::cue(v[voice=hanhan]) {
	color: green;
}
::cue(.red) {
	color: red;
}

/****************************************************************
 * 配音界面滚动区域
 ****************************************************************/
.zyh-dubbing-ui {
	display: block;
	position: absolute;
	width: 100%;
	top: 0px;
	bottom: 0px;
	overflow: hidden;
	background-color: #eeeeee;
}

.zyh-dubbing-player-area {
	display: block;
	position: static;
}

.zyh-dubbing-scroll-area {
	display: block;
	position: absolute;
	top: -1000rem;
	padding: 1rem;
	overflow: scroll;
}

.zyh-dubbing-done-button {
	margin-top: 1rem;
}

.zyh-dubbing-control-panel  {
	height: 4rem;
}

.vidoe_wrap{
	width:100%;
	position:relative;
	padding-bottom:56.25%; /*需要用padding来维持16:9比例,也就是9除以16*/
	height: 0;
	video{
		position: absolute;
		top:0;
		left: 0;
		width: 100%;
		height: 100%
	}
}
/*********************************************************************
 * 预览界面
 *********************************************************************/
.zyh-preview-ui {
	display: block;
	position: absolute;
	width: 100%;
	top: 0px;
	bottom: 0px;
	overflow: hidden;
	background-color: #eeeeee;
}

.zyh-preview-player-area {
	display: block;
	position: static;
}

.zyh-preview-scroll-area {
	display: block;
	position: absolute;
	top: -1000rem;
	padding: 1rem;
	overflow: scroll;
}

.zyh-preview-done {
	position: absolute;
	bottom: 0px;
}

/*******************************************************************
/* 配音视频播放相关
********************************************************************/

/* 所有顶部控件的容器 */
.zyh-dubbing-top {
	display: block;
	position: absolute;
	top: 0px;
	width: 100%;
	overflow: hidden;

	/*
	 * 文字行高与容器高一样并且中线对齐, 
	 * 这样不管多大的字体都可以垂直居中。
	 */
	height: 2.5rem;
	line-height: 2.5rem;
	vertical-align:middle;

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 所有底部控件的容器 */
.zyh-dubbing-bottom {
	display: block;
	position: absolute;
	bottom: 0px;
	width: 100%;
	overflow: hidden;

	/*
	 * 文字行高与容器高一样并且中线对齐, 
	 * 这样不管多大的字体都可以垂直居中。
	 */
	height: 2.5rem;
	line-height: 2.5rem;
	vertical-align:middle;

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部的功能条 */
.zyh-dubbing-top-bar {
	/* 位置: 顶部 */
	display: block;
	position: absolute;
	top: 0px;

	/* 大小 */
	height: 100%;
	width: 100%;
	text-align: center;
	color: white;

	padding: 0;
	padding-left: 2.5rem;
	padding-right: 2.5rem;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0));
	background: -moz-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏顶部功能条 */
.vjs-user-inactive .zyh-dubbing-top-bar {
	top: -2.5rem;
}

/* 左上角回退按钮 */
.zyh-dubbing-back-button {
	/* 位置: 靠顶部左则 */
	display: block;
	position: absolute;
	top: 0px;
	left: 0px;

	/* 大小 */
	height: 100%;
	width: 2.5rem;
	text-align: center;
	color: white;

	padding: 0;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 左上角回退按钮图标*/
.zyh-dubbing-back-button .vjs-icon-placeholder {
	font-size: 1.5rem;
}

/* 顶部中央的标题 */
.zyh-dubbing-head-title {
	/* 位置 */
	display: block;

	/* 大小 */
	height: 100%;
	width: 100%;

	/* 文字 */
	text-align: center;
	color: white;

	padding: 0;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部中央的标题文字 */
.zyh-dubbing-head-title .vjs-icon-placeholder {
	font-size: 1rem;
}

/* 底部的状态条 */
.zyh-dubbing-bottom-bar {
	display: block;
	height: 2.5rem;
	line-height: 2.5rem; /* 使文字垂直居中：文字行高与容器高一样 */
	width: 100%;
	text-align: center;
	vertical-align:middle;
	color: white;

	font-family: VideoJS;
	font-style: normal;

	/*底部对齐*/
	position: absolute;
	bottom: 0px;

	padding: 0;
	margin: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1));
	background: -moz-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏底部功能条 */
.vjs-user-inactive .zyh-dubbing-bottom-bar {
	bottom: -2.5rem;
}

/* 左下角当前时间 */
.zyh-dubbing-current-time {
	/* 位置*/
	float: left;
	width: 4.5rem;
	font-size: 1rem;
}

/* 右下角总时间 */
.zyh-dubbing-duration-time {
	/* 位置*/
	float: right;
	width: 4.5rem;
	font-size: 1rem;
}

/* 状态条的进度条 */
.zyh-dubbing-process-bar {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 40%;
	padding-right: 4.5rem;
	padding-left: 4.5rem;
	height: 10%;
	width: 100%;

	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

.zyh-dubbing-process-bar .uk-progress {
	height: 100%;
	line-height: 100%;
}

/* 底部中间的进度条 */
.zyh-dubbing-seekbar {
	display: block;
	position: absolute;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 25%;
	left:4.5rem;
	right: 4.5rem;
	height: 50%;
	width: auto;
	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 圆形按钮 */
.zyh-dubbing-round-button {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;
	opacity: 1;

	font-family: VideoJS;
	font-style: normal;

	text-align: center;
	vertical-align: middle;
	color: white;

	border: 0.03em solid rgba(255, 255, 255, 0.7);
	background-color: #2B333F;
	background-color: rgba(43, 51, 63, 0.7);
	border-radius: 100%;

	transition: all 0.4s;
}

/* 不活动时隐藏底部功能条 */
.vjs-user-inactive .zyh-dubbing-round-button {
	opacity: 0;
}

.zyh-dubbing-play-normal {
	top: 50%;
	left: 50%;
	height: 4rem;
	width: 4rem;
	margin-top: -2rem;
	margin-left: -2rem;
	line-height: 4rem;
}

.zyh-dubbing-play-slower {
	top: 70%;
	left: 30%;
	height: 3rem;
	width: 3rem;
	margin-top: -1.5rem;
	margin-left: -1.5rem;
	line-height: 3rem;
}

.zyh-dubbing-play-slowest {
	top: 70%;
	left: 15%;
	height: 3rem;
	width: 3rem;
	margin-top: -1.5rem;
	margin-left: -1.5rem;
	line-height: 3rem;
}

.zyh-dubbing-play-normal .vjs-icon-placeholder:before {
	font-size: 3rem;
	content: "\\f101"; 
}

.zyh-dubbing-play-slower .vjs-icon-placeholder:before {
	font-size: 1rem;
	content: "x0.75"; 
}

.zyh-dubbing-play-slowest .vjs-icon-placeholder:before {
	font-size: 1rem;
	content: "x0.5"; 
}

.sentence-play-button, .sentence-record-button{
	color: white;
	width: 48px;
	height: 48px;
	font-size: 22px;
	border-radius: 50%;
}

.uk-panel-title {
    margin-bottom: 6px;
}

.uk-article-divider {
    margin-top: 6px;
    margin-bottom: 6px;
}



/********************************************************************
 * 預览视频播放相关
 ********************************************************************/
/* 所有顶部控件的容器 */
.zyh-preview-top {
	display: block;
	position: absolute;
	top: 0px;
	width: 100%;
	overflow: hidden;

	/*
	 * 文字行高与容器高一样并且中线对齐, 
	 * 这样不管多大的字体都可以垂直居中。
	 */
	height: 2.5rem;
	line-height: 2.5rem;
	vertical-align:middle;

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 所有底部控件的容器 */
.zyh-preview-bottom {
	display: block;
	position: absolute;
	bottom: 0px;
	width: 100%;
	overflow: hidden;

	/*
	 * 文字行高与容器高一样并且中线对齐, 
	 * 这样不管多大的字体都可以垂直居中。
	 */
	height: 2.5rem;
	line-height: 2.5rem;
	vertical-align:middle;

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部的功能条 */
.zyh-preview-top-bar {
	/* 位置: 顶部 */
	display: block;
	position: absolute;
	top: 0px;

	/* 大小 */
	height: 100%;
	width: 100%;
	text-align: center;
	color: white;

	padding: 0;
	padding-left: 2.5rem;
	padding-right: 2.5rem;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0));
	background: -moz-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏顶部功能条 */
.vjs-user-inactive .zyh-preview-top-bar {
	top: -2.5rem;
}

/* 左上角回退按钮 */
.zyh-preview-back-button {
	/* 位置: 靠顶部左则 */
	display: block;
	position: absolute;
	top: 0px;
	left: 0px;

	/* 大小 */
	height: 100%;
	width: 2.5rem;
	text-align: center;
	color: white;

	padding: 0;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 左上角回退按钮图标*/
.zyh-preview-back-button .zyh-icon-placeholder {
	font-size: 1.5rem;
}

/* 全屏状态下不显示左上角回退按钮 */
.vjs-fullscreen .zyh-preview-back-button {
	display:none;
}

/* 右上角菜单按钮 */
.zyh-preview-menu-button {
	/* 位置: 靠顶部左则 */
	display: block;
	position: absolute;
	top: 0px;
	right: 0px;

	/* 大小 */
	height: 100%;
	width: 2.5rem;
	text-align: center;
	color: white;

	padding: 0;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 左上角菜单按钮图标*/
.zyh-preview-menu-button .zyh-icon-placeholder {
	font-size: 1.5rem;
}

/* 顶部中央的标题 */
.zyh-preview-head-title {
	/* 位置 */
	display: block;

	/* 大小 */
	height: 100%;
	width: 100%;

	/* 文字 */
	text-align: center;
	color: white;

	padding: 0;
	margin: 0;
	opacity: 1;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 顶部中央的标题文字 */
.zyh-preview-head-title .zyh-icon-placeholder {
	font-size: 1rem;
}

/* 底部的状态条 */
.zyh-preview-bottom-bar {
	display: block;
	height: 2.5rem;
	line-height: 2.5rem; /* 使文字垂直居中：文字行高与容器高一样 */
	width: 100%;
	text-align: center;
	vertical-align:middle;
	color: white;

	font-family: VideoJS;
	font-style: normal;

	/*底部对齐*/
	position: absolute;
	bottom: 0px;

	padding: 0;
	margin: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1));
	background: -moz-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1)); /*IE10及IE10+*/

	transition: all 0.4s;
	/*border: 0.03rem solid rgba(255, 255, 255, 0.7);*/
}

/* 不活动时隐藏底部功能条 */
.vjs-user-inactive .zyh-preview-bottom-bar {
	bottom: -2.5rem;
}

/* 左下角当前时间 */
.zyh-preview-current-time {
	/* 位置*/
	float: left;
	width: 4.5rem;
	font-size: 1rem;
}

/* 右下角总时间 */
.zyh-preview-duration-time {
	/* 位置*/
	float: right;
	width: 4.5rem;
	font-size: 1rem;
}

/* 右下角全屏 */
.zyh-preview-fullscreen {
	/* 位置*/
	float: right;
	width: 2.5rem;
	font-size: 1rem;
}

/* 正常显示进入全屏图标 */
.zyh-preview-fullscreen .zyh-icon-placeholder:before {
	content: "\\f108"; 
}

/* 全屏状态下显示退出全屏图标 */
.vjs-fullscreen .zyh-preview-fullscreen .zyh-icon-placeholder:before {
	content: "\\f109"; 
}

/* 底部中间的进度条 */
.zyh-preview-seekbar {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 20%;
	left: 4.5rem;
	right: 7rem;
	height: 50%;
	width: auto;

	/*border: 0.03em solid rgba(255, 255, 255, 0.7);*/
}

.zyh-preview-play-normal {
	top: 50%;
	left: 50%;
	height: 4rem;
	width: 4rem;
	margin-top: -2rem;
	margin-left: -2rem;
	line-height: 4rem;
}

/* 播放状态图标 */
.vjs-playing .zyh-preview-play-normal .zyh-icon-placeholder:before {
	font-size: 3rem;
	content: "\\f103"; 
}

/* 暂停状态图标 */
.vjs-paused .zyh-preview-play-normal .zyh-icon-placeholder:before {
	font-size: 3rem;
	content: "\\f101"; 
}


</style>


<div id="dubbing_params" style="display: none">
	<div id="tid" tid="{$attachInfo[tid]}" ></div>
	<div id="subject" subject="{$attachInfo[subject]}"></div>

	<input type="text" name="subject" value="dubbing:{$attachInfo[subject]}" id="needsubject" class="txt"/>
	
	<!--保存方式，value=1表示以草稿方式保存 -->
	<input type="hidden" id="postsave" name="save" value="">

	<!--{if $attachInfo['accompany'] != null}-->
	<audio id="accompany" src="{$attachInfo[accompany]}"></audio>
	<!--{/if}--> 
	<audio id="dubbing"></audio>
	<audio id="startRecordSnd" src="source/plugin/zhikai_n5video/di.ogg"></audio>
	<div id="zyh-attach-dubbing"></div>

	<!-- 帖子权限 --> 
	<select name="readperm" id="readperm"">
		<option value="">{lang unlimited}</option>
		<!--{loop $_G['cache']['groupreadaccess'] $val}-->
			<option value="$val[readaccess]" title="{lang readperm}: $val[readaccess]"{if $thread['readperm'] == $val[readaccess]} selected="selected"{/if}>$val[grouptitle]</option>
		<!--{/loop}-->
		<option value="255"{if $thread['readperm'] == 255} selected="selected"{/if}>{lang highest_right}</option>
	</select>
</div>

<!-- 配音界面 -->
<div class="zyh-dubbing-ui">
	<!-- 配音播放器 -->
	<div class="zyh-dubbing-player-area">
		<video id="video_{$attachInfo[tid]}" class="video-js vjs-default-skin vjs-big-play-centered vidoe_wrap">
			<source src="{$attachInfo[video]}" type='video/mp4'>
			<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that<a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
			<!--{if attachInfo['subtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[subtitle]}" srclang="en" id="original" label="{lang zhikai_n5video:lang_068}" default></track>
			<!--{/if}--> 
			<!--{if $attachInfo['tsubtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[tsubtitle]}" srclang="zh" id="translation" label="{lang zhikai_n5video:lang_069}"></track>
			<!--{/if}--> 
		</video>
	</div>
	<!-- 配音列表滚动区域 -->
	<div class="zyh-dubbing-scroll-area">
		<div id="dubbing-done" class="uk-panel uk-width-1-2 uk-container-center uk-text-center">
			<!-- 配音预览 -->
			<button class="zyh-dubbing-done-button uk-button uk-button-success uk-button-large uk-width-1-1" type="button" disabled>预览发布</button>
		</div>
	</div>
	

	<!-- 点击退出时弹出的模态对话框 -->
	<div class="zyh-dubbing-back-dialog uk-modal">
		<div class="uk-modal-dialog">
			<div class="uk-modal-header">
				<h2 class="uk-text-success">你还没有配音完成，是否继续配音？</h2>
			</div>
			<ul class="uk-nav uk-nav-side uk-text-large">
				<li><a id="back_dialog_continue" href="javascript:void(0)">继续配音</a></li>
				<li class="uk-nav-divider"></li>
				<li><a id="back_dialog_exitonly" href="javascript:void(0)">放弃返回</a></li>
			</ul>
		</div>
	</div>
	
	<!-- 点预览时，如果配音没有全部完成，弹出对话框询问。-->
	<div class="zyh-dubbing-complete-dialog uk-modal">
		<div class="uk-modal-dialog">
			<div class="uk-modal-header">
				<h3 class="uk-text-success">录音未全部完成，确定继续预览？</h2>
			</div>
			<div class="uk-button-group uk-width-1-1">
				<button class="zyh-dubbing-complete-dialog-cancel uk-button uk-button-large uk-width-1-2">取消</button>
				<button class="zyh-dubbing-complete-dialog-ok uk-button uk-button-success uk-button-large uk-width-1-2">确定</button>
			</div>
		</div>
	</div>

	<!-- 提示框 -->
	<div class="zyh-dubbing-merging-alert uk-modal">
		<div class="uk-modal-dialog">
			<p><i class="uk-icon-spinner uk-icon-spin"></i> 正在合成，请稍等下哦。</p>
		</div>
	</div>
</div>

<!-- 预览界面 -->
<div class="zyh-preview-ui" style="visibility: hidden;">
	<!-- 预览播放器 -->
	<div class="zyh-preview-player-area">
		<video id="video-preview" class="video-js vjs-default-skin vidoe_wrap">
			<source src="{$attachInfo[video]}" type='video/mp4'>
			<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that<a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
			<!--{if attachInfo['subtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[subtitle]}" srclang="en" id="original" label="{lang zhikai_n5video:lang_068}" default></track>
			<!--{/if}--> 
			<!--{if $attachInfo['tsubtitle'] != null}-->
			<track kind="subtitles" src="{$attachInfo[tsubtitle]}" srclang="zh" id="translation" label="{lang zhikai_n5video:lang_069}"></track>
			<!--{/if}--> 
		</video>
	</div>
	<!-- 保存混音后的声音 -->
	<div id="audio-dubbing">
	</div>
	<!-- 预览列表滚动区域 -->
	<div class="zyh-preview-scroll-area">
	</div>
	<!-- 预览完成按钮组 -->
	<div class="zyh-preview-done uk-button-group uk-width-1-1">
		<button class="zyh-preview-private-button uk-button uk-button-large uk-width-1-4 uk-icon-download"> 存本地</button>
		<button class="zyh-preview-publish-button uk-button uk-button-success uk-button-large uk-width-3-4 uk-icon-share"> 发布并分享</button>
	</div>

	<!-- 提示框 -->
	<div class="zyh-preview-saving-alert uk-modal">
		<div class="uk-modal-dialog">
			<p><i class="uk-icon-spinner uk-icon-spin"></i> 正在保存，请稍等下哦。</p>
		</div>
	</div>

</div>

<script type="text/javascript">
var jq = jQuery.noConflict();
var lang_msg = {
	'-1' : '{lang zhikai_n5video:lang_001}',
	'0' : '{lang zhikai_n5video:lang_002}',
	'1' : '{lang zhikai_n5video:lang_003}',
	'2' : '{lang zhikai_n5video:lang_004}',
	'3' : '{lang zhikai_n5video:lang_005}',
	'4' : '{lang zhikai_n5video:lang_006}',
	'5' : '{lang zhikai_n5video:lang_007}',
	'6' : '{lang zhikai_n5video:lang_008}',
	'7' : '{lang zhikai_n5video:lang_009}',
	'8' : '{lang zhikai_n5video:lang_010}',
	'9' : '{lang zhikai_n5video:lang_011}',
	'10' : '{lang zhikai_n5video:lang_012}',
	'11' : '{lang zhikai_n5video:lang_013}',
	'-5' : '{lang zhikai_n5video:lang_014}'
};

window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
var audioCtx  = new AudioContext();

///////////////////////////////////////////////////////////////////////////////////////
var videoOptions = {
	poster: '{$attachInfo[cover]}',
	controls: true,
	preload: true,
	// 禁用自带来的控制条和播放按钮。
	children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'errorDisplay', 'textTrackSettings', 'resizeManager', 'audioTrackButton'],
	inactivityTimeout: -1, // 不要超时inactive.
};

var startRecordSnd = jq('#startRecordSnd')[0]; // 录音开始提示音。
var player = videojs('video_' + jq('#tid').attr('tid'), videoOptions);
var playStatus = 0; // =0原音播放或暂停中，=1用户录音中，=2回放用户录音中, =3预览中。
var dubbingPlaybackRate = 1; // 播放的速率，dubbingPlaybackMode=0时有效。
var dubbingPlaybackMode = 0; // 0=播放视频原声，1=不播放声音，2=播放伴奏和录音。
var subtitleInit = false;
var subtitleCount = 0;
var subtitleCurrent = -1;
var sentenceStartTime = 0.0;
var sentenceEndTime = 0.0;

// 录音声音
var recordBeginTime, recordEndTime; // 用来测试实际的录音时间
var recordStartTimer;
var recordStopTimer;
var recordRawData = null; // 存放录音信息，开始和结束时间，mp3帧数据。
var audioPlayer = new AudioSourcePlayer(); // 录音播放器

// 伴奏声音
var accompanyBuffer = null; // 伴奏解码后声音数据, AudioBuffer类型
var accompanyPlayer = null; // 伴奏播放器
if (jq('#accompany').length > 0) {
	accompanyPlayer = jq('#accompany')[0];

	// 伴奏声音文件加载完成时，解码声音数据到缓存。
	accompanyPlayer.addEventListener("canplaythrough", function() {

		// 请求伴奏声音文件数据。
		// TODO: 有没有办法直接从元素中获取声音数据？
		var request = new XMLHttpRequest();
		request.responseType = "arraybuffer";
		request.open("GET", jq('#accompany').attr('src'), true);

		request.addEventListener("load", function(e) {
			// 解码数据到accompanyBuffer。
			if (audioCtx.decodeAudioData) {
				audioCtx.decodeAudioData(request.response, function(audioBuffer) {
					// 初始化伴奏数据缓存。
					accompanyBuffer = audioBuffer;
				});
			}
		}, false);

		request.send(null);
	});
}

// 配音声音
var dubbingBlob = null; // 存放伴奏和录音的混合并压缩后的mp3数据 blob类型。
var dubbingBlobName = null;
var dubbingBuffer = null; // 存放伴奏和录音的混合后的声音数据，AudioBuffer类型。

var attachInfo; // 存放录音的附件id。

// 不要让整个页面滚动
jq('body').css('padding-top', '0px');

/////////////////////////////////////////////////////////////////////////////
// 用到的提示框或对话框。
var mergingAlert = UIkit.modal(".zyh-dubbing-merging-alert", {center:true, bgclose:false});
var savingAlert = UIkit.modal(".zyh-preview-saving-alert", {center:true, bgclose:false});
var backDialog = UIkit.modal(".zyh-dubbing-back-dialog", {center:true});
var completeDialog = UIkit.modal(".zyh-dubbing-complete-dialog", {center:true, bgclose:false});

// 显示或隐藏对话框。
function toggleDialog(modal, force) {
	if (modal.isActive() ) {
		modal.hide(force);
	}
	else {
		modal.show();
	}
}

//////////////////////////////////////////////////////////////////////////
player.on("ready", function(){
	var origTrack = player.textTracks().getTrackById("original");
	var transTrack = player.textTracks().getTrackById("translation");

	// 强制加载所有的字幕。
	if (origTrack != null) {
		origTrack.mode = 'showing';
	}
	
	if (transTrack != null) {
		transTrack.mode = 'showing';
	}
});

player.on("canplay", function(){
	
	if (!subtitleInit) {
		subtitleInit = true;

		var origTrack = player.textTracks().getTrackById("original");
		var transTrack = player.textTracks().getTrackById("translation");

		// 获取原文、译文和时间段。
		if (origTrack) {
			subtitleCount = origTrack.cues.length;

			// 创建数组，存放录音的附件id。
			attachInfo = {};
			attachInfo['type'] = 'dubbing';
			attachInfo['data'] = {};
			attachInfo['data']['tid'] = jq('#tid').attr('tid');

			// 创建数组，用于存放录音压缩声音数据。
			recordRawData = new Array(subtitleCount);
			for (var i = 0; i < subtitleCount; i++) {
				var cue = origTrack.cues[i];
				recordRawData[i] = {};
				recordRawData[i]['startTime'] = cue.startTime;
				recordRawData[i]['endTime'] = cue.endTime;
				recordRawData[i]['data'] = null;
				recordRawData[i]['audioBuffer'] = null;
			}

			for (var i = 0; i < subtitleCount; i++) {
				var cue = origTrack.cues[i];

				var dom ='<div id="dubbing_list_item_' + i + '" class="uk-grid data-uk-grid-margin uk-grid-small">'
					+	'<div class="uk-width-1-1 uk-row-first">'
					+		'<div class="uk-panel uk-panel-box" id="sentence_' + i + '" startTime="' + cue.startTime + '" endTime="' + cue.endTime + '">'
					+			'<div class="uk-panel-badge uk-badge">Hot</div>'
					+			'<h3 class="uk-panel-title">' + (i + 1) + '/' + subtitleCount + '</h3>'
					+			'<p style="color:black;">' + cue.text + '</b></p>';

				// 译文
				if (transTrack && transTrack.cues && transTrack.cues[i]) {
					dom +=		'<p>' + transTrack.cues[i].text + '</p>';
				}
				dom +=			'<hr class="uk-article-divider">';
				dom +=			'<div class="zyh-dubbing-control-panel uk-grid uk-grid-small">';
				dom +=				'<div class="uk-width-3-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-width-1-1 uk-vertical-align-middle">';
				dom +=						'<div class="uk-progress uk-progress-mini">';
				dom +=							'<div id="record_progress_' + i + '" class="uk-progress-bar" style="width: 0%;"></div>';
				dom +=						'</div>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-vertical-align-middle">';
				dom +=						Math.floor((cue.endTime - cue.startTime) * 100) / 100  + 's';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-vertical-align-middle">';
				dom +=						'<button id="play_btn_' + i + '" class="uk-button uk-button-success sentence-play-button" type="button" style="display: none;">';
				dom +=							'<i class="uk-icon-play"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-vertical-align-middle">';
				dom +=						'<button id="record_btn_' + i + '" class="uk-button uk-button-success sentence-record-button" type="button" disabled>';
				dom +=							'<i class="uk-icon-microphone"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=			'</div>';

				dom +=		'</div>';
				dom +=	'</div>';
				dom += '</div>';

				jq('#dubbing-done').before(dom);

				// 设置句子的播放和录音回调。
				jq('#play_btn_' + i).click(onPlayBtnClick);
				jq('#record_btn_' + i).click(onRecordBtnClick);
				

			}
		}
		
		if (origTrack) {
			origTrack.mode = 'hidden';
		}
		if (transTrack) {
			transTrack.mode = 'hidden';
		}

		// 定位于列表开始。
		UIkit.Utils.scrollToElement(jq('#sentence_0'), {
			offset: $('#sentence_0').offset().top
		});

		// 定位滚动区域的开始位置。
		var elScroll = jq('.zyh-dubbing-scroll-area');
		elScroll.css('top', (jq('.zyh-dubbing-player-area').outerHeight()) + 'px');
		elScroll.css('bottom', '0px');
		elScroll.css('width', (jq('.zyh-dubbing-player-area').outerWidth() - (elScroll.innerWidth() - elScroll.width())) + 'px');

		var elDubbingDoneBtn = jq('.zyh-dubbing-done-button');
		elDubbingDoneBtn.css('margin-bottom', (elScroll.outerHeight() - elDubbingDoneBtn.outerHeight()) + 'px');

		// 监听触屏拖动。
		dragSwitchSentence.init();

		// 自动播放第一句
		var timer = window.setInterval(function(){
			window.clearInterval(timer);
			player.userActive(false);
			timer = window.setInterval(function(){
				window.clearInterval(timer);
				sentencePlay(0);
			}, 2000);
		}, 200);
	}
});

function onDubbingBack(e) {
	var haveData = false;
	for (var i = 0; i < subtitleCount; i++){
		if (recordRawData[i]['data'] != null) {
			haveData = true;
			break;
		}
	}

	if (haveData) {
		// 弹出对话框让用户选择是否退出。
		toggleDialog(backDialog);
	}
	else {
		history.back(-1);
	}
}

// 添加自定义的播放元素，点击视频时暂停和播放视频。
function dummyBigPlayBtnPlugin(options) {
	var elTop = document.createElement('div');
	elTop.className = 'zyh-dubbing-top';

	// 顶部左边返回按钮
	var elBackButton = document.createElement('div');
	elBackButton.className = 'zyh-dubbing-back-button';
	elBackButton.innerHTML = '<span class="uk-icon-angle-left vjs-icon-placeholder"></span>';
	elBackButton.onclick = onDubbingBack;

	// 顶部条
	var elTopBar = document.createElement('div');
	elTopBar.className = 'zyh-dubbing-top-bar';

	// 顶部中间的标题
	var elHeadTitel = document.createElement('div');
	elHeadTitel.className = 'zyh-dubbing-head-title';
	elHeadTitel.innerHTML = '<span class="vjs-icon-placeholder">{$attachInfo[subject]}</span>';
	elTopBar.appendChild(elHeadTitel);

	var elBottom = document.createElement('div');
	elBottom.className = 'zyh-dubbing-bottom';

	// 底部条
	var elBottomBar = document.createElement('div');
	elBottomBar.className = 'zyh-dubbing-bottom-bar';

	// 底部左侧当前时间
	var elCurrentTime = document.createElement('div');
	elCurrentTime.className = 'zyh-dubbing-current-time';
	elCurrentTime.innerHTML = '<span class="vjs-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elCurrentTime);

	// 底部右侧总时间
	var elDurationTime = document.createElement('div');
	elDurationTime.className = 'zyh-dubbing-duration-time';
	elDurationTime.innerHTML = '<span class="vjs-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elDurationTime);

	// 底部中央进度条
	var elProcessBar = document.createElement('div');
	elProcessBar.className = 'zyh-dubbing-process-bar';
	elProcessBar.innerHTML = '<div class="uk-progress uk-progress-success"><div class="uk-progress-bar" style="width: 0%;"></div></div>';
	elBottomBar.appendChild(elProcessBar);

	// 居中的播放按钮
	var elPlayNormalBtn = document.createElement('div');
	elPlayNormalBtn.className = 'zyh-dubbing-round-button zyh-dubbing-play-normal';
	elPlayNormalBtn.innerHTML = '<span class="vjs-icon-placeholder"></span>';
	elPlayNormalBtn.onclick = function (e) {
		dubbingPlaybackMode = 0;
		dubbingPlaybackRate = 1;
		player.userActive(false);
	};

	// 较慢速播放按钮
	var elPlaySlowerBtn = document.createElement('div');
	elPlaySlowerBtn.className = 'zyh-dubbing-round-button zyh-dubbing-play-slower';
	elPlaySlowerBtn.innerHTML = '<span class="vjs-icon-placeholder"></span>';
	elPlaySlowerBtn.onclick = function (e) {
		dubbingPlaybackMode = 0;
		dubbingPlaybackRate = 0.75;
		player.userActive(false);
	};

	// 最慢速播放按钮
	var elPlaySlowestBtn = document.createElement('div');
	elPlaySlowestBtn.className = 'zyh-dubbing-round-button zyh-dubbing-play-slowest';
	elPlaySlowestBtn.innerHTML = '<span class="vjs-icon-placeholder"></span>';
	elPlaySlowestBtn.onclick = function (e) {
		dubbingPlaybackMode = 0;
		dubbingPlaybackRate = 0.5;
		player.userActive(false);
	};

	elTop.appendChild(elTopBar);
	elTop.appendChild(elBackButton);
	elBottom.appendChild(elBottomBar);
	player.el().appendChild(elTop);
	player.el().appendChild(elBottom);
	player.el().appendChild(elPlayNormalBtn);
	player.el().appendChild(elPlaySlowerBtn);
	player.el().appendChild(elPlaySlowestBtn);
};
videojs.registerPlugin('dummyBigPlayBtnPlugin', dummyBigPlayBtnPlugin);
player.dummyBigPlayBtnPlugin({});

// 继续配音
jq('#back_dialog_continue').click(function(event){
	toggleDialog(backDialog);
});

// 仅退出配音界面
jq('#back_dialog_exitonly').click(function(event){
	toggleDialog(backDialog);
	history.back(-1);
});

///////////////////////////////////////////////////////////////
// 点击视频时，暂停和播放视频。
function onUserActive() {
	if (!player.userActive()) {
		console.log("userinactive");
		if (dubbingPlaybackMode == 0) {
			player.playbackRate(dubbingPlaybackRate);
			player.muted(false);
			player.play();
			if (accompanyPlayer != null) {
				accompanyPlayer.muted = true;
				accompanyPlayer.play();
			}
		}
		else if (dubbingPlaybackMode == 1) {
			player.playbackRate(1);
			player.muted(true);
			player.play();
			if (accompanyPlayer != null) {
				accompanyPlayer.muted = true;
				accompanyPlayer.play();
			}
		}
		else if (dubbingPlaybackMode == 2) {
			player.playbackRate(1);
			player.muted(true);
			player.play();
			if (accompanyPlayer != null) {
				accompanyPlayer.muted = false;
				accompanyPlayer.play();
			}
			audioPlayer.start();
		}
		
	}
	else {
		console.log("useractive");
		player.pause();
		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}
		audioPlayer.stop();
	}
}

player.userActive(true);
player.on("useractive", onUserActive);
player.on("userinactive", onUserActive);

// 停止录音或录音回放。
function stopRecordingOrRecordPlayback()
{
	if (playStatus == 1) {
		// 用户录音中：停止播放视频和录音。
		playStatus = 0;
		onCancelRecord();
		player.userActive(true);
	}
	else if (playStatus == 2) {
		// 用户录音回放中：录音回放完毕，停止播放。
		playStatus = 0;
		player.userActive(true);
	}
}

// 格式化时间字符串。
function getTimeString(seconds) {
	var h = parseInt(seconds / 3600);
	var m = parseInt((seconds - (h * 3600)) / 60);
	var s = parseInt(seconds - ((h * 3600) + m * 60));

	var strTime = '';
	if (h > 0) {
		strTime += (h < 10 ? '0' + h : h) + ':';
	}
	strTime += (m < 10 ? '0' + m : m) + ':';
	strTime += (s < 10 ? '0' + s : s);

	return strTime;
}

// 播放器时间更新回调。
player.on('timeupdate', function() {
	// 限制视频播放区间。
	var currentTime = player.currentTime();
	console.log("time:", currentTime, " playStatus=", playStatus, " range[", sentenceStartTime, "-", sentenceEndTime, "]");
	if (currentTime >= sentenceEndTime) {
		console.log("time seek to:", sentenceStartTime);

		player.pause();
		player.currentTime(sentenceStartTime);
		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}

		if (playStatus == 0) {
			// 区间循环播放
			var timer = window.setInterval(function(){
				window.clearInterval(timer);
				timer = null;
				player.play();
			}, 200);
		}
		else if (playStatus == 2) {
			// 状态改变
			playStatus = 0;
		}
	}

	// 更新播放进度，当前时间和总时间。
	var currentTime = player.currentTime();
	var duration = player.duration();
	if (currentTime != null) {
		jq('.zyh-dubbing-current-time .vjs-icon-placeholder').html(getTimeString(currentTime));
		if (!isNaN(duration)) {
			jq('.zyh-dubbing-process-bar .uk-progress-bar').css('width', ' ' + (currentTime * 100 / duration) + '%')
			jq('.zyh-dubbing-duration-time .vjs-icon-placeholder').html(getTimeString(duration));
		}
	}
});

// 设置播放区间到句子的时间范围内。
var sentenceTimer = null;
function sentencePlay(index) {
	//console.log("sentencePlay:", index);

	if (index != subtitleCurrent) {
		//console.log("sentence new:", index);

		// 切换句子之前关闭录音和录音回放。
		stopRecordingOrRecordPlayback();

		// 等待录音完成后，才能切换。因为保存录音是在一个后台work中，
		// 不等待保存录音就切换，录音会保存到切换后的句子上。
		// 使用定时器的方法来轮询录音状态，只在录音完成后，才执行真正的句子切换。
		if (sentenceTimer != null) {
			window.clearInterval(sentenceTimer);
			sentenceTimer = null;
		}
		sentenceTimer = window.setInterval(function(){
			if (!isRecordStart) {
				//console.log("record has done.")
				window.clearInterval(sentenceTimer);
				sentenceTimer = null;

				// 禁用之前句子的录音按钮，并在播放器定位成功后，使能当前句子的录音按钮。
				$('#record_btn_' + subtitleCurrent).attr('disabled', '1');
				subtitleCurrent = index;
				player.on("seeked", function() {
					$('#record_btn_' + subtitleCurrent).removeAttr('disabled');
				});

				// 播放视频
				sentenceStartTime = parseFloat($('#sentence_' + subtitleCurrent).attr('startTime'));
				sentenceEndTime = parseFloat($('#sentence_' + subtitleCurrent).attr('endTime'));
				player.currentTime(sentenceStartTime);
				dubbingPlaybackMode = 0;
				dubbingPlaybackRate = 1;
				player.userActive_ = true; // 强制执行。
				player.userActive(false);
			}
			else {
				//console.log("record hasn't done.")
			}
		}, 100);
	}
}

///////////////////////////////////////////////////////////////////////////////////
// 句子列表滚动

// 监听触屏：结束拖动句子列表时，切换句子。
var dragSwitchSentence = {

	isInTouch : false, // 用户的Touch还没有松开。
	isInScroll : false, // 正在进行对齐滚动。

	pos : {},
	start : false, // =true 用户开始滚动。
	needStop : false, // =true 用户开始滚动后，滚动距离达到一定时要停止录音和录音回放。
	delayTimer : null,

	onTouchStart : function(e) {
		//console.log('touchstart');
		var _self = dragSwitchSentence;
		_self.isInTouch = true;
	},

	onTouchMove : function(e) {
		//console.log('touchmove');
	},

	onTouchEnd : function(e) {
		//console.log('touchend');
		var _self = dragSwitchSentence;
		_self.isInTouch = false;
	},

	// 滚动结束事件处理
	// 句子列表滚动结束后进行对齐和切换当前句子。
	onScrollStop : function(e) {
		//console.log('onScrollStop');
		var _self = dragSwitchSentence;

		if (subtitleCount > 0) {
			var top = jq('.zyh-dubbing-scroll-area').scrollTop(); // 当前滚动到的位置
			var x, h;
			var i;

			for (i = 0; i < subtitleCount; i++) {
				var elItem = jq('#dubbing_list_item_' + i);
				x = elItem.position().top;
				h = elItem.outerHeight();

				if (i == (subtitleCount - 1)) {
					$('.zyh-dubbing-scroll-area').animate({scrollTop: top + x}, 500);
					sentencePlay(i);
					break;
				}

				if (x + h > 0) {
					if ((x + h / 2) >= 0) {
						// 向上对齐当前顶部
						if (i == 0) {
							$('.zyh-dubbing-scroll-area').animate({scrollTop: 0}, 500);
						} 
						else {
							$('.zyh-dubbing-scroll-area').animate({scrollTop: top + x}, 500);
						}

						sentencePlay(i);
					}
					else {
						// 向下对齐下一个顶部
						if (i < (subtitleCount - 1)) {
							if (i == 0) {
								$('.zyh-dubbing-scroll-area').animate({scrollTop: h + 10}, 500);
							}
							else {
								$('.zyh-dubbing-scroll-area').animate({scrollTop: top + x + h + 10}, 500);
							}

						}

						sentencePlay(i + 1);
					}

					break;
				}
			}
		}
	},

	init : function() {
		var _self = dragSwitchSentence;

		jq('.zyh-dubbing-scroll-area').on('touchstart', this.onTouchStart)
		.on('touchmove', this.onTouchMove)
		.on('touchend', this.onTouchEnd);

		// 监听滚动事件，在滚动结束时处理。
		jq('.zyh-dubbing-scroll-area').scroll(function() {
			//console.log('scroll');

			// scroll事件是在对齐过程的时间段中产生，就有可能是onScrollStop触发的，
			// 这时延时处理scroll事件。
			if (_self.isInScroll) {
				if (_self.delayTimer != null) {
					window.clearInterval(_self.delayTimer);
					_self.delayTimer = null;
				}

				_self.delayTimer = window.setInterval(function() {
					window.clearInterval(_self.delayTimer);
					_self.delayTimer = null;
					_self.isInScroll = false;
					jq('.zyh-dubbing-scroll-area').trigger('scroll');
				}, 500);

				return;
			}

			if (!_self.start) {
				_self.start = true;
				_self.needStop = true;
				_self.pos.startTop = jq('.zyh-dubbing-scroll-area').scrollTop();
			}
			else {
				//_self.pos.curTop = jq('.zyh-dubbing-scroll-area').scrollTop();
                //
				//// 垂直方向移动距离超过50，确认开始滚动，停止录音或录音回放。
				//var pullheight = _self.pos.curTop - _self.pos.startTop;
				////console.log('pullheight:' + pullheight);
				//if (_self.needStop && Math.abs(pullheight) > 50) {
				//	//console.log('stop');
				//	_self.needStop = false;
				//	stopRecordingOrRecordPlayback();
				//}
			}

			if (_self.delayTimer != null) {
				window.clearInterval(_self.delayTimer);
				_self.delayTimer = null;
			}

			function timerProcess() {
				window.clearInterval(_self.delayTimer);
				_self.delayTimer = null;

				if (!_self.isInTouch) {
					// 滚动到对齐的位置。
					_self.isInScroll = true;
					_self.onScrollStop();
					_self.start = false;
					_self.pos = {};

					// 因为上面的操作会触发scroll事件
					// 所以在滚动的过程（一秒钟）中要取消对scroll事件的响应。
					jq('.zyh-dubbing-scroll-area').scroll(null);
					_self.delayTimer = window.setInterval(function() {
						window.clearInterval(_self.delayTimer);
						_self.delayTimer = null;
						_self.isInScroll = false;
					}, 500);
				}
				else {
					// Touch没有松开前，减少定时间隔到100ms，以便快速知道Touch松开。
					_self.delayTimer = window.setInterval(timerProcess, 100);
				}
			}

			// 设置定时器 500ms后，假定认为停止滚动
			_self.delayTimer = window.setInterval(timerProcess, 500);
		});
	},
	
	deinit : function() {
		var elScroll = jq('.zyh-dubbing-scroll-area');
		elScroll.off('touchend', this.onTouchEnd);
		elScroll.off('touchmove', this.onTouchMove);
		elScroll.off('touchstart', this.onTouchStart);
		elScroll.scroll(null);
	} 
};

////////////////////////////////////////////////////////////////
// 录音
var isRecordStart = false;

function onCancelRecord() {
	// 停止录音，并丢弃数据。
	if (isRecordStart) {
		window.audiorecord.stopRecord(function(data) {});
		isRecordStart = false;
	}
}

// 录音时间到结束录音
function onStopRecord() {
	if (isRecordStart) {
		// cordova 录音版本。
		recordEndTime = audioCtx.currentTime;
		console.log("Record stoping... duration=" + (recordEndTime - recordBeginTime));

		if (window.audiorecord /*(window.audioinput.isCapturing()*/) {
			window.audiorecord.stopRecord(function(data) {
				console.log("Record success.");
				var blob = new Blob([data], { type: 'audio/ogg' });
				if (blob.size > 0) {
					var url = URL.createObjectURL(blob);
					var oggName = 'recording_' + Date.now() + '.ogg';

					// 将data录音mp3数据ArrayBuffer，并保存到recordRawData。
					// 用于最终的伴奏和录音的合并。
					if (recordRawData[subtitleCurrent]['data'] != null) {
						delete recordRawData[subtitleCurrent]['data'];
						recordRawData[subtitleCurrent]['data'] = null;
					}
					recordRawData[subtitleCurrent]['data'] = data;
					audioCtx.decodeAudioData(data, function (audioBuffer) { //解码成功时的回调函数
						console.log("Record decode success: duration=" + audioBuffer.duration);
						// 保存解码后的数据。
						if (recordRawData[subtitleCurrent]['audioBuffer'] != null) {
							delete recordRawData[subtitleCurrent]['audioBuffer'];
							recordRawData[subtitleCurrent]['audioBuffer'] = null;
						}
						recordRawData[subtitleCurrent]['audioBuffer'] = audioBuffer;

						// 录完后自动播放用户的录音。
						var sentence = jq('#sentence_' + subtitleCurrent);
						var event = {data: {index: subtitleCurrent, startTime: sentence.attr('startTime'), endTime: sentence.attr('endTime')}};
						jq('#play_btn_' + subtitleCurrent).trigger('click', event);
					}, function (e) { //解码出错时的回调函数
						console.log('Record decode error:', e);
					});

					// 使能预览按钮。
					jq('.zyh-dubbing-done-button').removeAttr('disabled');

					// 充许提交贴子。
					needsubject = true; // 在post.php中定义。
					needmessage = true;
					$('.btn_pn').removeClass('btn_pn_grey').addClass('btn_pn_blue');
					$('.btn_pn').attr('disable', 'false');

					// 显示句子播放按钮。
					jq('#play_btn_' + subtitleCurrent).css('display', 'inline-block');

					// 录音完成。
					isRecordStart = false;
					playStatus = 0;

					// 停止视频播放
					player.userActive(true);
				}
			}, function(errMsg) {
				console.log('Record stop error:', errMsg);
				// 录音完成。
				isRecordStart = false;
				playStatus = 0;

				// 停止视频播放
				player.userActive(true);
			});
		}

		console.log("Record stopped!");
		//-------------------------------

		// 录音正常结束，进度条动画在100%位置停止。
		var elem = jq('#record_progress_' + subtitleCurrent);
		elem.css('transition', 'width 0s linear');
		elem.css('width', '100%');
	}
}

/**
 *
 * @param onSuccess
 * @param onDenied
 * @param onError
 */
var getRecordPermission = function (onSuccess, onDenied, onError) {
	window.audiorecord.hasPermission(function (result) {
		try {
			if (result.hasPermission) {
				if (onSuccess) onSuccess();
			}
			else {
				window.audiorecord.requestPermission(function (result) {
					try {
						if (result.hasPermission) {
							if (onSuccess) onSuccess();
							else if (onDenied) onDenied();
						}
					}
					catch (ex) {
						if (onError) onError("Start after getting permission exception: " + ex);
					}
				},
				function (errMsg) {
					if (onError) onError("getRecordPermission: " + errMsg);
				});
			}
		}
		catch (ex) {
			if (onError) onError("getRecordPermission exception: " + ex);
		}
	});
};

// 当前句子录音按钮按下
function onRecordBtnClick(event) {
	if (!isRecordStart) {
		isRecordStart = true;
		playStatus = 1;

		// 隐藏播放按钮。
		jq('#play_btn_' + subtitleCurrent).css('display', 'none');

		// 让视频静音。
		player.currentTime(sentenceStartTime);
		player.muted(true);

		// 停止伴奏。
		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}

		// 停止录音回放。
		audioPlayer.stop();

		// 复位录音进度条。
		jq('#record_progress_' + subtitleCurrent).css('transition', 'width 0s');
		jq('#record_progress_' + subtitleCurrent).css('width', '0%');

		// 检查录音权限。
		try {
			if (window.audiorecord) {
				// 获取录音权限。
				getRecordPermission(function () {
					// 播放提示音,时长100ms,播放完成开始录音。
					startRecordSnd.play();

					// 	等待一段时间才开始录音，避免把提示音录进来。
					if (recordStartTimer != null) {
						window.clearInterval(recordStartTimer);
					}
					recordStartTimer = window.setInterval(function() {
						window.clearInterval(recordStartTimer);
						recordStartTimer = null;

						console.log("Record starting...");
						window.audiorecord.startRecord({
								outEncodeFormat: "ogg"
							}, function(result) {
							console.log("Record start success:" + result);

							recordBeginTime = audioCtx.currentTime;

							// 开始录音进度条动画。
							jq('#record_progress_' + subtitleCurrent).css('transition', 'width ' + (sentenceEndTime - sentenceStartTime) + 's linear');
							jq('#record_progress_' + subtitleCurrent).css('width', '100%');

							// 启动录音时的播放。
							dubbingPlaybackMode = 1;
							player.userActive_ = true; // 强制执行。
							player.userActive(false);

							// 时间到后停止录音。
							if (recordStopTimer != null) {
								window.clearInterval(recordStopTimer);
							}
							recordStopTimer = window.setInterval(function() {
								window.clearInterval(recordStopTimer);
								recordStopTimer = null;
								onStopRecord();
							}, (sentenceEndTime - sentenceStartTime + 1) * 1000); // 加1，实际录音时间比进度条的视觉效果多录1秒。
						});
						console.log("Recor started!");
					}, 500);
				}, function (deniedMsg) {
					console.log(deniedMsg);
				}, function (errorMsg) {
					console.log(errorMsg);
				});
			}
			else {
				alert("Already capturing!");
			}
		}
		catch (ex) {
			alert("startCapture exception: " + ex);
		}		
	} else {
		// 停止录音，并丢弃数据。
		onCancelRecord();

		// 重新开始录音。
		onRecordBtnClick();
	}
}

// 当前句子录音回放按钮按下
function onPlayBtnClick(event) {
	//console.log("record playback.")
	playStatus = 2;

	// 播放用户录音。
	if (recordRawData[subtitleCurrent]['audioBuffer'] != null) {
		audioPlayer.attach(player, recordRawData[subtitleCurrent]['audioBuffer'], sentenceStartTime);
	}

	// 重新播放伴奏和录音。
	if (accompanyPlayer != null) {
		accompanyPlayer.currentTime = sentenceStartTime;
	}

	// 让视频静音播放，并隐藏大播放按钮和控制条。
	player.muted(true);
	player.currentTime(sentenceStartTime);
	dubbingPlaybackMode = 2;
	player.userActive_ = true; // 强制执行。
	player.userActive(false);
}

////////////////////////////////////////////////////////////////////////////
// 预览部分
var previewVideoOptions = {
	poster: '{$attachInfo[cover]}',
	controls: true,
	preload: true,
	// 禁用自带来的控制条和播放按钮。
	children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'errorDisplay', 'textTrackSettings', 'resizeManager', 'audioTrackButton'],
	inactivityTimeout: 5000, // 在active状态会显示控制面板，用户5秒不操作视频，进入inactive收起控制面板。
};

var previewPlayer = videojs('video-preview', previewVideoOptions);
var stopRecTimer = null; // 等待录音完成的定时器。
var previewSeekBar = null; // 进度条
var previewInit = false;

// 返回合并buffer1和buffer2的声音数据。
function mergeAudioBuffer(context, buffer1, buffer2) {
	if (buffer1.sampleRate != buffer2.sampleRate) {
		// TODO: support resample.
		return;
	}

	var sampleRate = Math.min(buffer1.sampleRate, buffer2.sampleRate);
	var length = Math.max(buffer1.length, buffer2.length);
	var channelCount = Math.max(buffer1.numberOfChannels, buffer2.numberOfChannels);
	var dstAudioBuffer = context.createBuffer(channelCount, length, sampleRate);

	// 合并左声道
	var srcData1 = buffer1.getChannelData(0);
	var srcData2 = buffer2.getChannelData(0);
	var dstData = dstAudioBuffer.getChannelData(0);

	var src1 = new Float32Array(srcData1);
	var src2 = new Float32Array(srcData2);
	var dst = new Float32Array(dstData);
	var count = Math.min(src1.length, src2.length);

	for (i = 0; i < count; i++) {
		dst[i] = (src1[i] + src2[i]) / 2;
	}
	if (src1.length > src2.length) {
		dst.set(src1.subarray(i), i);
	}
	else if (src1.length < src2.length) {
		dst.set(src2.subarray(i), i);
	}
	dstAudioBuffer.copyToChannel (dst, 0, 0);

	delete src1;
	delete src2;
	delete dst;

	// 合并右声道
	if (dstAudioBuffer.numberOfChannels > 1) {
		srcData1 = buffer1.numberOfChannels > 1 ? buffer1.getChannelData(1) : null;
		srcData2 = buffer2.numberOfChannels > 1 ? buffer2.getChannelData(1) : null;
		dstData = dstAudioBuffer.numberOfChannels > 1 ? dstAudioBuffer.getChannelData(1) : null;
		
		src1 = srcData1 == null ? null : new Float32Array(srcData1);
		src2 = srcData2 == null ? null : new Float32Array(srcData2);
		dst = new Float32Array(dstData);
		
		if (src1 != null && src2 != null) {
			count = Math.min(src1.length, src2.length);
			for (i = 0; i < count; i++) {
				dst[i] = (src1[i] + src2[i]) / 2;
			}
			if (src1.length > src2.length) {
				dst.set(src1.subarray(i), i);
			}
			else if (src1.length < src2.length) {
				dst.set(src2.subarray(i), i);
			}
		}
		else if (src1 != null) {
			dst.set(src1);
		}
		else if (src2 != null) {
			dst.set(src2);
		}
		dstAudioBuffer.copyToChannel (dst, 1, 0);

		delete src1;
		delete src2;
		delete dst;
	}

	return dstAudioBuffer;
}

// 将buffer2合并到buffer1，开始合并时间为startTime。
// 合并后buffer1的时长不会改变，超出的部分会丢弃。
function mixAudioBuffer(context, buffer1, buffer2, startTime) {
	if (buffer1.sampleRate != buffer2.sampleRate) {
		// TODO: support resample.
		return;
	}

	var sampleRate = Math.min(buffer1.sampleRate, buffer2.sampleRate);
	var offset = Math.floor(startTime * buffer1.sampleRate);
	var channelCount = Math.max(buffer1.numberOfChannels, buffer2.numberOfChannels);

	// 合并左声道
	var src1 = buffer1.getChannelData(0);
	var src2 = buffer2.getChannelData(0);
	var count = Math.min(src1.length - offset, src2.length);
	console.log("mixAudioBuffer - left startTime:", startTime, " src1:", src1.length, " src2:", src2.length);

	// 合并重合的数据
	for (var i = offset, j = 0; j < count; i++, j++) {
		src1[i] = src1[i] + src2[j];
	}

	console.log("mixAudioBuffer - left ok.");

	// 合并右声道
	if (buffer1.numberOfChannels > 1) {
		src1 = buffer1.getChannelData(1);
		src2 = buffer2.numberOfChannels > 1 ? buffer2.getChannelData(1) : buffer2.getChannelData(0);
		count = Math.min(src1.length - offset, src2.length);
		console.log("mixAudioBuffer - right src1:", src1.length, " src2:", src2.length);

		// 合并重合的数据
		for (var i = offset, j = 0; j < count; i++, j++) {
			src1[i] = src1[i] + src2[j];
		}

		console.log("mixAudioBuffer - mix right ok.");
	}
}

//数据从32位浮点转成16位整形，编码器只识别16位整形PCM采样。
function convertBufferFloat32ToInt16(buffer) {
	// 合并左声道
	var inputLeft = buffer.getChannelData(0);
	var length = inputLeft.length;
	var outputBuffer = new ArrayBuffer(2 * length * (buffer.numberOfChannels == 1 ? 1 : 2));
	var output = new Int16Array(outputBuffer);
	var i = 0, j = 0;
	var s;

	if (inputLeft != null && output != null) {
		if (buffer.numberOfChannels == 1) {
			for (i = 0; i < length; i++) {
				var s = Math.max(-1, Math.min(1, inputLeft[i]));
				output[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
			}
		}
		else {
			var inputRight = buffer.getChannelData(1);
			if (inputRight != null) {
				for (i = 0, j = 0; i < length; i++) {
					s = Math.max(-1, Math.min(1, inputLeft[i]));
					output[j++] = s < 0 ? s * 0x8000 : s * 0x7FFF;
					s = Math.max(-1, Math.min(1, inputRight[i]));
					output[j++] = s < 0 ? s * 0x8000 : s * 0x7FFF;
				}
			}
		}
	}
	else {
		delete output;
		delete outputBuffer;
		output = null;
		buffer = null;
	}

	return outputBuffer;
}

// 上传最终的ogg blob到服务器。
function uploadDubbing() {
	// 显示正在保存提示
	toggleDialog(savingAlert);

	// 如果后台还没有ogg编码完成配音，则等待。
	if (dubbingBlob == null) {
		var timer = window.setInterval(function() {
			if (dubbingBlob != null) {
				window.clearInterval(timer);

				// ogg配音数据上传服务器。
				blobShardUpload(dubbingBlob, {
					url: 'plugin.php?id=zhikai_n5video:upload&fid={$_G[fid]}&uid={$_G[uid]}&hash={$upfhash}',
					name: dubbingBlobName,
					stepCallback: uploadDubbingCallback,
				});
			}
		}, 1000);
	}
	else {
		// ogg已经生成完毕，立即上传服务器。
		blobShardUpload(dubbingBlob, {
			url: 'plugin.php?id=zhikai_n5video:upload&fid={$_G[fid]}&uid={$_G[uid]}&hash={$upfhash}',
			name: dubbingBlobName,
			stepCallback: uploadDubbingCallback,
		});
	}
}

// 上传完配音文件后的回调。
function uploadDubbingCallback(data) {
	if (data.indexOf('DISCUZUPLOAD') > -1) {
		var arr = data.split('|');
		if (arr[1] == 0) {
			// 记录上传文件的附件ID。
			attachInfo['data']['dubbing'] = arr[2];

			// 更新帖子正文中的标记。
			jq('#needmessage').val('[dubbing]' + JSON.stringify(attachInfo) + '[/dubbing]');

			// 附件提交的表单数据，表单中至少有一个attachnew['附件ID'][xxx]的表单项，
			// 提交后附件ID对应的附件才会被视为已使用附件。
			// 表单项的内容只是简单的填充一个字符串，暂时未使用。
			jq('#zyh-attach-dubbing').html('').
				append('<input type="text" value="dubbing" name="attachnew['+ arr[2] +'][description]"/>');

			// 提交
			jq('#postsubmit').click();
		}
		else if (lang_msg[arr[1]] != undefined ) {
			// 出错，显示出错原因。
			var sizelimit = '';
			if(arr[8] == 'ban') {
				sizelimit = '{lang uploadpicatttypeban}';
			} else if(arr[8] == 'perday') {
				sizelimit = '{lang donotcross}'+Math.ceil(arr[8]/1024)+'K)';
			} else if(arr[8] > 0) {
				sizelimit = '{lang donotcross}'+Math.ceil(arr[8]/1024)+'K)';
			}
			popup.open(lang_msg[arr[1]] + sizelimit, 'alert');
		}
	}
	else {
		if (data) {
			popup.open(lang_msg[data], 'alert');
		}
	}

	toggleDialog(savingAlert);
}

function mergeRecord2Commpany()
{
	// 清除以前的配音
	delete dubbingBlob;
	dubbingBlob = null;

	// 显示等待合成。
	toggleDialog(mergingAlert);

	// 先复制伴奏。
	dubbingBuffer = audioCtx.createBuffer(2, parseInt(48000 * player.duration()), 48000);
	if (accompanyBuffer != null) {
		dubbingBuffer.copyToChannel(accompanyBuffer.getChannelData(0), 0, 0);
		if (accompanyBuffer.numberOfChannels > 1) {
			dubbingBuffer.copyToChannel(accompanyBuffer.getChannelData(1), 1, 0);
		}
	}

	// 再混合用户的录音
	var i = 0;
	while (recordRawData.hasOwnProperty(i)) {
		if (recordRawData[i]['audioBuffer'] != null) {
			console.log("mixAudioBuffer #", i);
			mixAudioBuffer(audioCtx, dubbingBuffer, recordRawData[i]['audioBuffer'], recordRawData[i]['startTime']);
		}
		i++;
	}

	audioPlayer.attach(previewPlayer, dubbingBuffer, 0);

	// for test.
	//var source = audioCtx.createBufferSource();
	//source.buffer = dubbingBuffer;
	//source.connect(audioCtx.destination);
	//source.start();

	// 全部混合完成后，尽快给用户提供能播放的声音用于预览。然后在
	// 后台进行耗时的mp3格式编码，用户确认时，编码应该早就结束了，
	// 这里就可以立即上传mp3格式的声音到服务器。

	// 将PCM数据保存到文件中，然后编码成Ogg格式。
	window.resolveLocalFileSystemURL(cordova.file.cacheDirectory , function (dir) {
		console.log("File dir load ok:", dir.nativeURL);

		var fileName = "dubbing_" + Date.now() + ".pcm";
		dir.getFile(fileName, {create: true}, function (file) {
			console.log("File get ok:", file.nativeURL);

			file.createWriter(function (fileWriter) {
				console.log("File create writer ok.");

				var pcmInt16 = convertBufferFloat32ToInt16(dubbingBuffer);
				if (pcmInt16 == null) {
					console.log("convertBufferFloat32ToInt16 fail.");
				}

				// 将pcm数据保存到文件。
				fileWriter.onwriteend = function() {
					console.log("File write ok.");
					delete pcmInt16;

					// 到这里用户已经可以进行预览了，取消等待显示。
					toggleDialog(mergingAlert);

					// 切换到预览界面。
					jq('.zyh-dubbing-ui').css('visibility', 'hidden');
					jq('.zyh-preview-ui').css('visibility', 'visible');

					// 不处理句子列表的滚动。
					dragSwitchSentence.deinit();

					playStatus = 3;
					previewPlayer.muted(true);
					previewPlayer.pause();
					previewPlayer.currentTime(0);
					previewPlayer.userActive(true);
					previewPlayer.play();

					// 后台编码成ogg数据。
					window.audiorecord.encoder({
							outEncodeFormat: "ogg",
							inFileName: fileName,
							outSamplingRate: dubbingBuffer.sampleRate,
							outNumberOfChannels: dubbingBuffer.numberOfChannels,
							outBitRate: 128000
						}, function(data) {
							// 获取编码后的ogg数据。
							console.log("Encoder success");
							
							if (dubbingBlob != null) {
								delete dubbingBlob;
								dubbingBlob = null;
							}

							dubbingBlob = new Blob([data], { type: 'audio/ogg' });
							dubbingBlobName = 'dubbing_' + Date.now() + '.ogg';

						}, function(result) {
							alert("Encoder fail: " + e.toString());

							// 取消等待显示。
							toggleDialog(mergingAlert);
						});
				};
				fileWriter.onerror = function (e) {
					alert("Failed file write: " + e.toString());
					delete pcmInt16;

					// 取消等待显示。
					toggleDialog(mergingAlert);
				};
				fileWriter.write(pcmInt16);
			}, function () {
				alert("FileWriter error!");
				// 取消等待显示。
				toggleDialog(mergingAlert);
			});
		}, function (err) {
			//alert("File creat fail!");
			// 取消等待显示。
			toggleDialog(mergingAlert);
		});
	}, function (err) {
		alert("File system load fail.");
		// 取消等待显示。
		toggleDialog(mergingAlert);
	});
}

// 切换到预览界面。
function switch2PreviewUI() {
	// 等待录音完成后，才能切换，因为保存录音是在一个后台work中。
	if (stopRecTimer != null) {
		window.clearInterval(stopRecTimer);
		stopRecTimer = null;
	}
	stopRecTimer = window.setInterval(function(){
		if (!isRecordStart) {
			//console.log("record has done.")
			window.clearInterval(stopRecTimer);
			stopRecTimer = null;

			// 暂停播放
			player.pause();
			jq(".vjs-control-panel").css("display","block");
			if (accompanyPlayer != null) {
				accompanyPlayer.pause();
			}
			audioPlayer.stop();

			// 生成合并声音。
			mergeRecord2Commpany();
		}
		else {
			//console.log("record hasn't done.")
		}
	}, 100);
}

// 切换回配音界面。
function switch2Dubbing() {
	previewPlayer.pause();
	audioPlayer.stop();
	jq('.zyh-dubbing-ui').css('visibility', 'visible');
	jq('.zyh-preview-ui').css('visibility', 'hidden');
	dragSwitchSentence.init();
	playStatus = 0;
}


jq('.zyh-dubbing-complete-dialog-cancel').click(function(e) {
	toggleDialog(completeDialog);
	return false;
});

jq('.zyh-dubbing-complete-dialog-ok').click(function(e) {
	// 关闭对话框，这里设置为true是为了避免因与mergingAlert对话框在同一函数中设置，
	// 导致下次打开时自动关闭。true可以直接关闭，不显示关闭动画。
	toggleDialog(completeDialog, true);
	switch2PreviewUI();
	return false;
});

jq('.zyh-dubbing-done-button').click(function(e){
	// 切换之前关闭录音和录音回放。
	stopRecordingOrRecordPlayback();

	// 确认所有录音都已经完成。
	function allRecordDone() {
		var result = true;

		for (var i = 0; i < subtitleCount; i++) {
			if (recordRawData[subtitleCurrent]['data'] == null) {
				result = false;
				break;
			}
		}

		return result;
	}

	if (allRecordDone()) {
		// 录音全部完成，切换到预览界面。
		switch2PreviewUI();
	}
	else {
		// 弹出对话框让用户选择是否继续。
		toggleDialog(completeDialog);
	}

	return;

});

// 添加自定义的播放元素，点击视频时暂停和播放视频。
function previewPlayBtnPlugin(options) {
	var elTop = document.createElement('div');
	elTop.className = 'zyh-preview-top';

	// 顶部条
	var elTopBar = document.createElement('div');
	elTopBar.className = 'zyh-preview-top-bar';

	// 顶部左边返回按钮
	var elBackButton = document.createElement('div');
	elBackButton.className = 'zyh-preview-back-button';
	elBackButton.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder uk-icon-angle-left"></span>';
	elTopBar.appendChild(elBackButton);
	elBackButton.onclick = function (e) {
		switch2Dubbing();
	};

	// 右上角菜单按钮
	var elMenuButton = document.createElement('div');
	elMenuButton.className = 'zyh-preview-menu-button';
	elMenuButton.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elTopBar.appendChild(elMenuButton);

	// 顶部中间的标题
	var elHeadTitel = document.createElement('div');
	elHeadTitel.className = 'zyh-preview-head-title';
	elHeadTitel.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">{$attachInfo[subject]}</span>';
	elTopBar.appendChild(elHeadTitel);

	var elBottom = document.createElement('div');
	elBottom.className = 'zyh-preview-bottom';

	// 底部条
	var elBottomBar = document.createElement('div');
	elBottomBar.className = 'zyh-preview-bottom-bar';

	// 底部中央进度条
	var elSeekBar = document.createElement('div');
	elSeekBar.className = 'zyh-preview-seekbar';
	elBottomBar.appendChild(elSeekBar);

	// 底部左侧当前时间
	var elCurrentTime = document.createElement('div');
	elCurrentTime.className = 'zyh-preview-current-time';
	elCurrentTime.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elCurrentTime);

	// 底部右侧全屏
	var elFullScreen = document.createElement('div');
	elFullScreen.className = 'zyh-preview-fullscreen';
	elFullScreen.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elBottomBar.appendChild(elFullScreen);
	elFullScreen.onclick = function (e) {
		if (previewPlayer.isFullscreen()) {
			previewPlayer.exitFullscreen();
		}
		else {
			previewPlayer.requestFullscreen();
		}
	};

	// 底部右侧总时间
	var elDurationTime = document.createElement('div');
	elDurationTime.className = 'zyh-preview-duration-time';
	elDurationTime.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder">00:00</span>';
	elBottomBar.appendChild(elDurationTime);

	// 居中的播放按钮
	var elPlayNormalBtn = document.createElement('div');
	elPlayNormalBtn.className = 'zyh-preview-play-normal zyh-dubbing-round-button';
	elPlayNormalBtn.innerHTML = '<span aria-hidden="true" class="zyh-icon-placeholder"></span>';
	elPlayNormalBtn.onclick = function (e) {
		if (previewPlayer.userActive() || !previewPlayer.hasStarted()) {
			if (previewPlayer.paused()) {
				previewPlayer.play();
			}
			else {
				previewPlayer.pause();
			}
		}
	};

	elTop.appendChild(elTopBar);
	elBottom.appendChild(elBottomBar);
	previewPlayer.el().appendChild(elPlayNormalBtn);
	previewPlayer.el().appendChild(elTop);
	previewPlayer.el().appendChild(elBottom);
};

videojs.registerPlugin('previewPlayBtnPlugin', previewPlayBtnPlugin);
previewPlayer.previewPlayBtnPlugin({});

//////////////////////////////////
// 下面这一段用来保持声音和画面同步。

// 开始或恢复播放
previewPlayer.on("play", function() {
	console.log("previewPlayer: play");

	if (playStatus == 3) {
		audioPlayer.start();
	}
});

// 暂停播放
previewPlayer.on("pause", function() {
	console.log("previewPlayer: pause");

	if (playStatus == 3) {
		audioPlayer.stop();
	}
});

// 视频跳转
previewPlayer.on("seeked", function() {
	console.log("previewPlayer: seeked");

	if (playStatus == 3) {
		audioPlayer.stop();
		if (!previewPlayer.paused()) {
			audioPlayer.start();
		}
	}
});

previewPlayer.userActive(false);
//previewPlayer.play();
////////////////////////////////////

// 播放器时间更新回调。
previewPlayer.on('timeupdate', function() {
	// 更新播放进度，当前时间和总时间。
	var currentTime = previewPlayer.currentTime();
	var duration = previewPlayer.duration();
	if (currentTime != null) {
		// 更新播放进度，当前时间。
		jq('.zyh-preview-current-time .zyh-icon-placeholder').html(getTimeString(currentTime));

		if (!isNaN(duration)) {
			// 初始化进度条
			if (previewSeekBar == null) {
				previewSeekBar = new Seekbar.Seekbar({
					renderTo: ".zyh-preview-seekbar",
					minValue: 0, maxValue: previewPlayer.duration(),
					valueListener: function (value) {
						previewPlayer.currentTime(value);
						previewPlayer.reportUserActivity(null);
					},
					thumbColor: '#82bb42',
					negativeColor: '#82bb42',
					positiveColor: '#CCC',
					value: 0
				});
			}
			if (previewSeekBar != null) {
				previewSeekBar.setValue(currentTime);
			}

			jq('.zyh-preview-process-bar .uk-progress-bar').css('width', ' ' + (currentTime * 100 / duration) + '%')
			jq('.zyh-preview-duration-time .zyh-icon-placeholder').html(getTimeString(duration));
		}
	}
});

previewPlayer.on("canplay", function() {
	if (!previewInit) {
		previewInit = true;

		var origTrack = previewPlayer.textTracks().getTrackById("original");
		var transTrack = previewPlayer.textTracks().getTrackById("translation");
		if (origTrack) {
			origTrack.mode = 'hidden';
		}
		if (transTrack) {
			transTrack.mode = 'hidden';
		}

	}
});

// 切换全屏后会解发resize，在这里修改进度条的长度。
previewPlayer.on("playerresize", function() {
	console.log("previewPlayer: playerresize");

	if (previewSeekBar != null) {
		previewSeekBar.resize();
	}
});

// blob分片上传。
// url, name, shardSize, progressCallback, stepCallback, userData
function blobShardUpload(blob, options) {
	var succeed = 0;
	var size = blob.size;
	var file_id = parseInt(Math.random() * 9999 + 10001);

	// 切片大小和切片数量
	var _shardSize = options.shardSize || 2;
	_shardSize = _shardSize * 1024 * 1024;
	var shardCount = Math.ceil(size / _shardSize);
	if (size == 0){
		return false;
	}

	// 回调：显示进度条。
	if (typeof options.progressCallback == 'function') {
		options.progressCallback(0, options.userData);
	}

	// 将文件切片，分成几块放在re数组中上传。
	var re = [], start, end = null;
	for (var i = 0; i < shardCount; ++i) {
		re[i] = [];
		start = i * _shardSize,
		end = Math.min(size, start + _shardSize);
		re[i]["file_data"] = blob.slice(start, end);
		re[i]["file_name"] = options.name;
		re[i]["file_size"] = size;
		re[i]["file_id"] = file_id;
		re[i]["file_total"] = shardCount;
		re[i]["file_index"] = i + 1;
	}

	// 将数组中的切片依次上传。
	var i = 0;
	var xhr = new XMLHttpRequest();
	function ajaxStack(stack) {
		// 数组中是否还要有要上传的切片。
		if (stack.hasOwnProperty(i)) {
			// 新建表单来上传当前切片。
			var fcs = stack[i];
			var form = new FormData();
			form.append("file_data", fcs['file_data']);
			form.append("file_name", fcs['file_name']);
			form.append("file_total", fcs['file_total']);
			form.append("file_index", fcs['file_index']);
			form.append("file_size", fcs['file_size']);
			form.append("file_id", fcs['file_id']);
			xhr.open('POST', options.url, true);
			xhr.onload = function () {
				// 当前切片上传完成，继续上传下一切片。
				ajaxStack(stack);
			}
			xhr.onreadystatechange = function () {
				// 更新状态信息和上传进度。
				if (xhr.readyState == 4 && xhr.status == 200) {
					// 回调：显示状态信息。
					if (typeof options.stepCallback == 'function'){
						options.stepCallback(xhr.responseText, options.userData);
					}

					++succeed;

					// 回调：更新进度条进度显示。
					if (typeof options.progressCallback == 'function') {
						var percnt = Math.round(succeed / shardCount * 10000) / 100.00;
						options.progressCallback(percnt, options.userData);
					}
				}
			}
			// 上传记录了切片数据的表单。
			xhr.send(form);
			// 下一切片。
			i++;
		}
	}
	// 开始上传第一个切片。
	ajaxStack(re);
}

jq('.zyh-preview-publish-button').click(function() {
	// 在标题区增加public来区分已发布配音。
	jq('#needsubject').val('public:' + jq('#subject').attr('subject'));

	// 上传最终的mp3 blob到服务器。
	uploadDubbing();

	// 禁止提交，由上面的回调函数进行提交。
	return false;
});

jq('.zyh-preview-private-button').click(function() {
	// 在标题区增加private来区分未发布配音。
	jq('#needsubject').val('private:' + jq('#subject').attr('subject'));

	// 上传最终的mp3 blob到服务器。
	uploadDubbing();

	// 禁止提交，由上面的回调函数进行提交。
	return false;
});

//////////////////////////////////////////////////////////////
// 处理系统Back键
document.addEventListener("deviceready", onDeviceReady, false);

function onDeviceReady() {
	document.addEventListener("backbutton", onBackKeyDown, false);
}

function onBackKeyDown() {
	if (mergingAlert.isActive() || savingAlert.isActive() || backDialog.isActive() || completeDialog.isActive()) {
		// 有对话框或提示框弹出时，不做处理。
		return;
	}

	if (playStatus == 3) {
		// 从预览返回到配音
		switch2Dubbing();
	}
	else {
		// 退出配音。
		onDubbingBack();
	}
}

</script>


<!--{/block}-->