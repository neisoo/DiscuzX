<!--{block file}-->
<link href="source/plugin/zhikai_n5video/static/css/style.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/uikit.docs.min.css" rel="stylesheet" />
<link href="source/plugin/zhikai_n5video/uikit/css/components/progress.css " rel="stylesheet" />
<link rel="stylesheet" href="source/plugin/zhikai_n5video/video-js/video-js.min.css">

<script type="text/javascript"src="source/plugin/zhikai_n5video/static/js/jquery.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/static/js/jquery.shardupload.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/uikit/js/uikit.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/video-js/video.min.js"></script>
<script type="text/javascript" src="source/plugin/zhikai_n5video/mp3-recorder/recorder.js"></script>

<style>
::cue {
	background: none;
	color: #fff;
	text-shadow: 0 1px #000, 1px 0 #000, -1px 0 #000, 0 -1px #000;
	font-size: medium;
}
::cue(v[voice=hanhan]) {
	color: green;
}
::cue(.red) {
	color: red;
}

.fixed_div {
	width: 100%;
	position: fixed;
	background: #e5e5e5;
	top: 0;
	z-index: 1000;
	left: 0px;
	border: 1px solid red;
}

.sentence_wrap {
	padding-left: 10px;
	padding-right: 10px;
}

.vidoe_wrap{
	width:100%;
	position:relative;
	padding-bottom:56.25%; /*需要用padding来维持16:9比例,也就是9除以16*/
	height: 0;
	video{
		position: absolute;
		top:0;
		left: 0;
		width: 100%;
		height: 100%
	}
}

/* 显示当前时间和总时间 */
.video-js .vjs-time-control {
    display: block;
}
.video-js .vjs-remaining-time {
    display: none;
}

/* 顶部的功能条 */
.video-js .vjs-top-bar {
	font-size: 2.5em;
	line-height: 1em;
	height: 1.5em;
	width: 100%;
	display: block;

	/*顶部对齐*/
	position: absolute;
	top:0em;

	padding: 0;
	cursor: pointer;
	opacity: 1;
	
	/* 背景透明渐变 */
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0));
	background: -moz-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,1) 50%, rgba(255,255,255,0) 0%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0)); /*IE10及IE10+*/

	transition: all 0.4s;
}

/* 左上角回退按钮 */
.video-js .vjs-back-button {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	top: 1em;
	left: 1em;
	height: 2em;
	width: 2em;
	margin-top: -1em;
	margin-left: -1em;

	/* 文字大小 */
	font-size: 2em;
	line-height: 2em;
}

/* 左上角回退按钮图标*/
.video-js .vjs-back-button .vjs-icon-placeholder:before {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	margin-top: 0.4em;
}

/* 点击视频时显示的按钮和状态条区域 */
.video-js .vjs-control-panel {
	transition: visibility 0.1s, opacity 0.1s;
}

/* 顶部中央的标题 */
.video-js .vjs-control-panel .vjs-head-title {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	top: 0.4em;
	height: 1.6em;
	width: 100%;

	/* 文字大小 */
	font-size: 1.6em;
	line-height: 1.6em;
}

/* 顶部中央的标题文字 */
.video-js .vjs-control-panel .vjs-head-title .vjs-icon-placeholder {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

/* 底部的状态条 */
.video-js .vjs-control-panel .vjs-status-bar {
	font-size: 0.5em;
	height: 2.5em;
	width: 100%;
	display: block;
	position: absolute;
	bottom: 0em;
	padding-top: 0.75em;
	padding-bottom: 0.75em;
	cursor: pointer;
	opacity: 1;
	background: #000;
	background: -webkit-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1));
	background: -moz-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);; /*FireFox*/
	background: -o-linear-gradient(top,rgba(255,255,255,0) 20%,rgba(255,255,255,1) 100%);  /* Opear */
	background: -ms-linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,1)); /*IE10及IE10+*/
}

/* 状态条的当前时间 */
.video-js .vjs-control-panel .vjs-status-bar .vjs-current-time {
	/* 位置*/
	display: block;
	position: absolute;
	padding: 0;
	left: 1em;
	height: 100%;
	width: 3em;
}


/* 状态条的总时间 */
.video-js .vjs-control-panel .vjs-status-bar .vjs-duration-time {
	/* 位置*/
	display: block;
	position: absolute;
	padding: 0;
	right: 1em;
	height: 100%;
	width: 3em;
}

/* 状态条的进度条 */
.video-js .vjs-control-panel .vjs-process-bar {
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;

	/* 背景透明 */
	background-color: rgba(0, 0, 0, 0);

	/* 位置*/
	bottom: 1.1em;
	padding-right: 5em;
	padding-left: 4.5em;
	height: 0.3em;
	width: 100%;
}

.video-js .vjs-control-panel .vjs-process-bar .uk-progress {
	height: 100%;
	line-height: 100%;
}

/* 圆形按钮 */
.video-js .vjs-round-play-button {
	font-size: 3em;
	line-height: 1.5em;
	height: 2em;
	width: 2em;
	display: block;
	position: absolute;
	padding: 0;
	cursor: pointer;
	opacity: 1;
	border: 0.03em solid rgba(255, 255, 255, 0.7);
	background-color: #2B333F;
	background-color: rgba(43, 51, 63, 0.7);
	border-radius: 100%;
	transition: all 0.4s;
}

.video-js .vjs-play-normal {
	top: 50%;
	left: 50%;
	height: 2em;
	width: 2em;
	margin-top: -1em;
	margin-left: -1em;
}

.video-js .vjs-play-slower {
	top: 70%;
	left: 30%;
	height: 1.4em;
	width: 1.4em;
	margin-top: -0.7em;
	margin-left: -0.7em;
}

.video-js .vjs-play-slowest {
	top: 70%;
	left: 15%;
	height: 1.4em;
	width: 1.4em;
	margin-top: -0.7em;
	margin-left: -0.7em;
}

.video-js .vjs-round-play-button .vjs-icon-placeholder:before {
	text-align: center;
	vertical-align:middle;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;

	font-family: VideoJS;
	font-weight: normal;
	font-style: normal;
}

.video-js .vjs-play-normal .vjs-icon-placeholder:before {
	font-size: 1.5em;
	margin-top: 0.15em;
	content: "\\f101"; 
}

.video-js .vjs-play-slower .vjs-icon-placeholder:before {
	font-size: 0.4em;
	margin-top: -0.3em;
	content: "x0.75"; 
}

.video-js .vjs-play-slowest .vjs-icon-placeholder:before {
	font-size: 0.4em;
	margin-top: -0.3em;
	content: "x0.5"; 
}


.sentence-play-button, .sentence-record-button{
	color: white;
	width: 48px;
	height: 48px;
	font-size: 22px;
	border-radius: 50%;
}

.uk-panel-title {
    margin-bottom: 6px;
}

.uk-article-divider {
    margin-top: 6px;
    margin-bottom: 6px;
}
</style>

<div class="zhikai-player cl fixed_div">
<video id="video_{$_G[tid]}" class="video-js vjs-default-skin vjs-big-play-centered vidoe_wrap">
	<source src="{$attachInfo[video]}" type='video/mp4'>
	<p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that<a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
	<!--{if attachInfo['subtitle'] != null}-->
	<track kind="subtitles" src="{$attachInfo[subtitle]}" srclang="en" id="original" label="{lang zhikai_n5video:lang_068}" default></track>
	<!--{/if}--> 
	<!--{if $attachInfo['tsubtitle'] != null}-->
	<track kind="subtitles" src="{$attachInfo[tsubtitle]}" srclang="zh" id="translation" label="{lang zhikai_n5video:lang_069}"></track>
	<!--{/if}--> 
</video>
</div>
<div id="sutitle_list" class="sentence_wrap">
</div>
<!--{if $attachInfo['accompany'] != null}-->
<audio id="accompany" src="{$attachInfo[accompany]}"></audio>
<!--{/if}--> 
<audio id="startRecordSnd" src="source/plugin/zhikai_n5video/di.ogg"></audio>

<script type="text/javascript">
var jq = jQuery.noConflict();

var videoOptions = {
	poster: '{$attachInfo[cover]}',
	controls: true,
	// 禁用自带来的控制条和播放按钮。
	children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'errorDisplay', 'textTrackSettings', 'resizeManager', 'audioTrackButton'],
	inactivityTimeout: -1, // 不要超时inactive.
};

var startRecordSnd = jq('#startRecordSnd')[0]; // 录音开始提示音。
var player = videojs('video_{$_G[tid]}', videoOptions);
var subtitleInit = false;
var subtitleCount = 0;
var subtitleCurrent = -1;
var sentenceStartTime = 0;
var sentenceEndTime = 0;

var recordPlayer = null;
var accompanyPlayer = null;
if (jq('#accompany').length > 0) {
	accompanyPlayer = jq('#accompany')[0];
}

var playStatus = 0; // =0原音播放或暂停中，=1用户录音中，=2回放用户录音中

player.on("ready", function(){
	var origTrack = player.textTracks().getTrackById("original");
	var transTrack = player.textTracks().getTrackById("translation");

	// 强制加载所有的字幕。
	if (origTrack != null) {
		origTrack.mode = 'showing';
	}
	
	if (transTrack != null) {
		transTrack.mode = 'showing';
	}
});

player.on("canplay", function(){
	
	if (!subtitleInit) {
		subtitleInit = true;

		// 在句子列表前插入一些空白，使得视频不会遮住最前面的句子。
		jq('.sentence_wrap').css('padding-top', jq('.zhikai-player').outerHeight() - 33 + 'px');

		var origTrack = player.textTracks().getTrackById("original");
		var transTrack = player.textTracks().getTrackById("translation");
		
		// 获取原文、译文和时间段。
		if (origTrack) {
			subtitleCount = origTrack.cues.length;
			for (var i = 0; i < subtitleCount; i++) {
				var cue = origTrack.cues[i];

				var dom ='<div class="uk-grid data-uk-grid-margin uk-grid-small">'
					+	'<div class="uk-width-1-1 uk-row-first">'
					+		'<div class="uk-panel uk-panel-box" id="sentence_' + i + '" startTime="' + cue.startTime + '" endTime="' + cue.endTime + '">'
					+			'<div class="uk-panel-badge uk-badge">Hot</div>'
					+			'<h3 class="uk-panel-title">' + (i + 1) + '/' + subtitleCount + '</h3>'
					+			'<p style="color:black;">' + cue.text + '</b></p>';

				// 译文
				if (transTrack && transTrack.cues && transTrack.cues[i]) {
					dom +=		'<p>' + transTrack.cues[i].text + '</p>';
				}
				dom +=			'<hr class="uk-article-divider">';
				dom +=			'<div class="uk-grid uk-grid-small">';
				dom +=				'<div class="uk-width-3-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-width-1-1 uk-vertical-align-middle">';
				dom +=						'<div class="uk-progress uk-progress-mini">';
				dom +=							'<div id="record_progress_' + i + '" class="uk-progress-bar" style="width: 0%;"></div>';
				dom +=						'</div>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6 uk-vertical-align">';
				dom +=					'<div class="uk-panel uk-vertical-align-middle">';
				dom +=						Math.floor((cue.endTime - cue.startTime) * 100) / 100  + 's';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6">';
				dom +=					'<div class="uk-panel">';
				dom +=						'<button id="play_btn_' + i + '" class="uk-button uk-button-success sentence-play-button" type="button" style="display: none;">';
				dom +=							'<i class="uk-icon-play"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div class="uk-width-1-6">';
				dom +=					'<div class="uk-panel">';
				dom +=						'<button id="record_btn_' + i + '" class="uk-button uk-button-success sentence-record-button" type="button"' + (i == 0 ? '>' : ' disabled>');
				dom +=							'<i class="uk-icon-microphone"></i>';
				dom +=						'</button>';
				dom +=					'</div>';
				dom +=				'</div>';
				dom +=				'<div id="audio_data_' + i + '" style="display: none;">'; // 在里存放录音的声音。
				dom +=				'</div>';
				dom +=			'</div>';

				dom +=		'</div>';
				dom +=	'</div>';
				dom += '</div>';

				jq('#sutitle_list').append(dom);

				// 设置句子的播放和录音回调。
				jq('#play_btn_' + i).click(onPlayBtnClick);
				jq('#record_btn_' + i).click(onRecordBtnClick);
				

			}
		}
		
		if (origTrack) {
			origTrack.mode = 'hidden';
		}
		if (transTrack) {
			transTrack.mode = 'hidden';
		}

		// 更新播放时间。
		jq('.vjs-current-time .vjs-icon-placeholder').html(getTimeString(0));
		jq('.vjs-duration-time .vjs-icon-placeholder').html(getTimeString(player.duration()));

		// 定位于列表开始。
		UIkit.Utils.scrollToElement(jq('#sentence_0'), {
			offset: $('#sentence_0').offset().top
		});

		// 句子列表尾部也填充空白，使得最后一句可以滚动到视频下面。
		if (subtitleCount > 1) {
			jq('#pagebottom').css('padding-bottom', $('#sentence_' + (subtitleCount - 2)).outerHeight() + 'px');
		}

		// 切换到第一条句子开始播放。
		sentencePlay(0);

		// 监听触屏拖动。
		dragSwitchSentence.init();
	}
});

// 添加自定义的播放元素，点击视频时暂停和播放视频。
function dummyBigPlayBtnPlugin(options) {

	// 顶部条
	var elTopBar = document.createElement('div');
	elTopBar.className = 'vjs-top-bar';
	player.el().appendChild(elTopBar);

	// 顶部左边返回按钮
	var elBackButton = document.createElement('div');
	elBackButton.className = 'vjs-back-button';
	elBackButton.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder uk-icon-angle-left"></span>';
	player.el().appendChild(elBackButton);

	var elControlPanel = document.createElement('div');
	elControlPanel.className = 'vjs-control-panel';

	// 顶部中间的标题
	var elHeadTitel = document.createElement('div');
	elHeadTitel.className = 'vjs-head-title';
	elHeadTitel.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">{$attachInfo[subject]}</span>';
	elControlPanel.appendChild(elHeadTitel);

	// 底部状态条
	var elStatusBar = document.createElement('div');
	elStatusBar.className = 'vjs-status-bar';
	elControlPanel.appendChild(elStatusBar);

	// 底部左侧当前时间
	var elCurrentTime = document.createElement('div');
	elCurrentTime.className = 'vjs-current-time';
	elCurrentTime.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">00:00</span>';
	elStatusBar.appendChild(elCurrentTime);

	// 底部右侧总时间
	var elDurationTime = document.createElement('div');
	elDurationTime.className = 'vjs-duration-time';
	elDurationTime.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder">00:00</span>';
	elStatusBar.appendChild(elDurationTime);

	// 底部中央进度条
	var elProcessBar = document.createElement('div');
	elProcessBar.className = 'vjs-process-bar';
	elProcessBar.innerHTML = '<div class="uk-progress uk-progress-success"><div class="uk-progress-bar" style="width: 0%;"></div></div>';
	elStatusBar.appendChild(elProcessBar);

	// 居中的播放按钮
	var elPlayNormalBtn = document.createElement('div');
	elPlayNormalBtn.className = 'vjs-round-play-button vjs-play-normal';
	elPlayNormalBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlayNormalBtn);
	elPlayNormalBtn.onclick = function (e) {
		onUserActive();
		player.userActivity_ = false;
	};

	// 较慢速播放按钮
	var elPlaySlowerBtn = document.createElement('div');
	elPlaySlowerBtn.className = 'vjs-round-play-button vjs-play-slower';
	elPlaySlowerBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlaySlowerBtn);
	elPlaySlowerBtn.onclick = function (e) {
		onUserActive();
		player.playbackRate(0.75);
		player.userActivity_ = false;
	};

	// 最慢速播放按钮
	var elPlaySlowestBtn = document.createElement('div');
	elPlaySlowestBtn.className = 'vjs-round-play-button vjs-play-slowest';
	elPlaySlowestBtn.innerHTML = '<span aria-hidden="true" class="vjs-icon-placeholder"></span>';
	elControlPanel.appendChild(elPlaySlowestBtn);
	elPlaySlowestBtn.onclick = function (e) {
		onUserActive();
		player.playbackRate(0.5);
		player.userActivity_ = false;
	};

	player.el().appendChild(elControlPanel);

};
videojs.registerPlugin('dummyBigPlayBtnPlugin', dummyBigPlayBtnPlugin);
player.dummyBigPlayBtnPlugin({});

// 点击视频时，暂停和播放视频。
function onUserActive() {
	if (playStatus == 0) {
		if (jq(".vjs-control-panel").css("display") == "block") {
			console.log("userinactive");

			// 恢复播放并隐藏面板
			player.muted(false);
			player.playbackRate(1);
			player.play();
			jq(".vjs-control-panel").css("display","none");
		}
		else {
			console.log("useractive");

			//点击屏幕后暂停并显示面板
			player.pause();
			jq(".vjs-control-panel").css("display","block");
		}
	}
}

player.userActive(false);
player.on("useractive", onUserActive);
player.on("userinactive", onUserActive);

// 停止录音或录音回放。
function stopRecordOrPlay()
{
	if (playStatus == 1) {
		// 停止播放视频和录音。
		onStopRecord();
	}
	else if (playStatus == 2) {
		// 录音回放完毕，停止播放。
		player.pause();

		jq(".vjs-control-panel").css("display","block");

		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}
		if (recordPlayer != null) {
			recordPlayer.pause();
		}
		playStatus = 0;
	}
}

// 格式化时间字符串。
function getTimeString(seconds) {
	var h = parseInt(seconds / 3600);
	var m = parseInt((seconds - (h * 3600)) / 60);
	var s = parseInt(seconds - ((h * 3600) + m * 60));

	var strTime = '';
	if (h > 0) {
		strTime += (h < 10 ? '0' + h : h) + ':';
	}
	strTime += (m < 10 ? '0' + m : m) + ':';
	strTime += (s < 10 ? '0' + s : s);

	return strTime;
}

// 播放器时间更新回调。
player.on('timeupdate', function() {
	// 限制视频播放区间。
	if (player.currentTime() >= sentenceEndTime) {
		player.currentTime(sentenceStartTime);
		stopRecordOrPlay();
	}

	// 更新播放进度，当前时间。
	jq('.vjs-control-panel .uk-progress-bar').css('width', ' ' + (player.currentTime() * 100 / player.duration()) + '%')
	jq('.vjs-current-time .vjs-icon-placeholder').html(getTimeString(player.currentTime()));
});

// 设置播放区间到句子的时间范围内。
var sentenceTimer = null;
function sentencePlay(index) {
	//console.log("sentencePlay:", index);

	if (index != subtitleCurrent) {
		//console.log("sentence new:", index);

		// 切换句子之前关闭录音和录音回放。
		bPlayAfterRecord = false;
		stopRecordOrPlay();

		// 等待录音完成后，才能切换。因为保存录音是在一个后台work中，
		// 不等待保存录音就切换，录音会保存到切换后的句子上。
		// 使用定时器的方法来轮询录音状态，只在录音完成后，才执行真正的句子切换。
		if (sentenceTimer != null) {
			window.clearInterval(sentenceTimer);
			sentenceTimer = null;
		}
		sentenceTimer = window.setInterval(function(){
			if (!isRecordStart) {
				//console.log("record has done.")
				window.clearInterval(sentenceTimer);
				sentenceTimer = null;
				
				// 禁用之前句子的录音按钮，并使能当前句子的录音按钮。
				$('#record_btn_' + subtitleCurrent).attr('disabled', '1');
				subtitleCurrent = index;
				$('#record_btn_' + subtitleCurrent).removeAttr('disabled');

				// 播放视频
				sentenceStartTime = $('#sentence_' + subtitleCurrent).attr('startTime');
				sentenceEndTime = $('#sentence_' + subtitleCurrent).attr('endTime');
				player.currentTime(sentenceStartTime);
				player.muted(false);
				player.playbackRate(1);
				player.play();
				jq(".vjs-control-panel").css("display","none");
			}
			else {
				//console.log("record hasn't done.")
			}
		}, 100);
	}
}

///////////////////////////////////////////////////////////////////////////////////
// 句子列表滚动

// 监听触屏：结束拖动名子列表时，切换句子。
var dragSwitchSentence = {
	isInTouch : false,
	isInScroll : false,

	init : function() {
		var pos = {};
		var status = false;
		var _self = this;

		$('body').on('touchstart', function(e) {
			//console.log('touchstart');

			e = mygetnativeevent(e);
			pos.startx = e.touches[0].clientX;
			pos.starty = e.touches[0].clientY;
			_self.isInTouch = true;
		})
		.on('touchmove', function(e) {
			//console.log('touchmove');

			e = mygetnativeevent(e);
			pos.curposx = e.touches[0].clientX;
			pos.curposy = e.touches[0].clientY;

			// 垂直方向移动距离超过50，确认开始滚动。
			var pullheight = pos.curposy - pos.starty;
			if (!status && Math.abs(pullheight) > 50) {
				status = true;

				// 拖动开始，停止录音和录音回放。
				stopRecordOrPlay();
			}
		})
		.on('touchend', function(e) {
			//console.log('touchend');

			_self.isInTouch = false;

			// 拖动结束，准备切换句子。
			if (pos.curposy != pos.starty){
				onScrollStop();
			}

			status = false;
			pos = {};
		});

		// 滚动结束事件处理
		// 句子列表滚动结束后进行对齐和切换当前句子。
		function onScrollStop(e) {
			//console.log('onScrollStop');

			if (dragSwitchSentence.isInScroll) {
				dragSwitchSentence.isInScroll = false;
			}

			if (!dragSwitchSentence.isInTouch && subtitleCount > 0) {
				var x, h;
				var i;
				var top = $('#sentence_0').offset().top;
				var align = $(window).scrollTop() + top;

				for (i = 0; i < subtitleCount; i++) {
					x = $('#sentence_' + i).offset().top;
					h = $('#sentence_' + i).outerHeight();

					if (align >= x && align < (x + h)) {

						if (align <= x + h / 2) {
							// 向上对齐当前
							UIkit.Utils.scrollToElement(jq('#sentence_' + i), {
								offset: top
							});
							
							sentencePlay(i);
						}
						else {
							// 向下对齐下一个
							if (i < (subtitleCount - 1)) {
								UIkit.Utils.scrollToElement(jq('#sentence_' + (i + 1)), {
									offset: top
								});
							}
							
							sentencePlay(i + 1);
						}

						break;
					}
				}
			}
		};

		// 监听滚动事件，在滚动结束时处理。
		var scrollTimer = null;
		document.onscroll = function() {
			//console.log('scroll');
			if (dragSwitchSentence.isInTouch) {
				return;
			}
			dragSwitchSentence.isInScroll = true;

			if (scrollTimer != null){
			   window.clearTimeout(scrollTimer);
			}

			window.canAutoScroll = false;
			//500ms后，假定认为停止滚动
			scrollTimer = window.setTimeout(function() {
				dragSwitchSentence.isInScroll = false;
				onScrollStop();
			}, 500);
		};
	}
};

////////////////////////////////////////////////////////////////
// 录音
var isRecordStart = false;
var bPlayAfterRecord = false;
var waitRecordStopTimer = null;

//唯一影响mp3文件大小的参数为 bitRate
//sampleRate 仅供特殊需求的人使用
var recorder = new MP3Recorder({
	WORKER_PATH: 'source/plugin/zhikai_n5video/mp3-recorder/recorder-worker.js',
	//numChannels: 1,     //声道数,默认为1
	//sampleRate: 8000,   //采样率,一般由设备提供,比如 48000
	bitRate: 64,        //比特率,不要低于64,否则可能录制无声音（人声）

	//录音结束事件
	complete: function (data, type) {
		var blob = new Blob(data, { type: type });
		if (blob.size > 0) {
			var url = URL.createObjectURL(blob);
			var mp3Name = 'recording_' + Date.now() + '.mp3';

			// 保存句子声音数据
			jq('#audio_data_' + subtitleCurrent).html('').
				append('<a href="' + url + '" download="' + mp3Name + '">' + mp3Name + '</a>').
				append('<audio controls src="' + url + '" id="record_audio_' + subtitleCurrent + '"></audio>');

			// 显示句子播放按钮
			jq('#play_btn_' + subtitleCurrent).css('display', 'inline-block');
			
			// 录音完成。
			isRecordStart = false;

			if (bPlayAfterRecord) {
				// 录完后自动播放用户的录音。
				var sentence = jq('#sentence_' + subtitleCurrent);
				var event = {data: {index: subtitleCurrent, startTime: sentence.attr('startTime'), endTime: sentence.attr('endTime')}};
				jq('#play_btn_' + subtitleCurrent).trigger('click', event);
			}
			else {
				playStatus = 0;
			}
		}

	},

	error: function (data) {
		console.log("encode error.");
	}
});


// 录音时间到结束录音
function onStopRecord() {
	if (isRecordStart) {
		// 停止视频播放
		player.pause();

		//停止录音，触发complete()。
		recorder.stop();

		var elem = jq('#record_progress_' + subtitleCurrent);
		if (bPlayAfterRecord) {
			// 录音正常结束，进度条动画在100%位置停止。
			elem.css('transition', 'width 0s linear');
			elem.css('width', '100%');
		}
		else {
			// 录音被中断，进度条动画在当前位置停止。
			elem.css('transition', 'width 0s linear');
			elem.css('width', ' ' + elem[0].offsetWidth + 'px');
		}
	}
}

//输出错误信息
function writeError(msg) {
	console.log(msg);
}

if (!recorder.support) writeError("您的浏览器不支持HTML5录音！");

function onRecordStart() {
	if (playStatus == 1) {
		//提示音结束后开始录音和播放视频（已经静音）
		recorder.start(function () {
			// 开始录音动画
			jq('#record_progress_' + subtitleCurrent).css('transition', 'width ' + (sentenceEndTime - sentenceStartTime) + 's linear');
			jq('#record_progress_' + subtitleCurrent).css('width', '100%');

			player.playbackRate(1);
			player.play();
		}, function (e) {
			switch (e.code || e.name) {
				case 'PERMISSION_DENIED':
				case 'PermissionDeniedError':
					writeError('用户拒绝提供设备。');
					break;
				case 'NOT_SUPPORTED_ERROR':
				case 'NotSupportedError':
					writeError('浏览器不支持硬件设备。');
					break;
				case 'MANDATORY_UNSATISFIED_ERROR':
				case 'MandatoryUnsatisfiedError':
					writeError('无法发现指定的硬件设备。');
					break;
				default:
					writeError('无法打开麦克风。异常信息:' + (e.code || e.name));
					break;
			}
		});
	}
}
startRecordSnd.addEventListener('ended', onRecordStart, false);

// 当前句子录音按钮按下
function onRecordBtnClick(event) {
	if (!recorder.support) return;

	if (!isRecordStart) {
		isRecordStart = true;
		bPlayAfterRecord = true;
		playStatus = 1;

		// 隐藏播放按钮。
		jq('#play_btn_' + subtitleCurrent).css('display', 'none');

		// 让视频静音播放。
		player.currentTime(sentenceStartTime);
		player.muted(true);
		jq(".vjs-control-panel").css("display","none");

		// 停止伴奏。
		if (accompanyPlayer != null) {
			accompanyPlayer.pause();
		}

		// 复位录音进度条。
		jq('#record_progress_' + subtitleCurrent).css('transition', 'width 0s');
		jq('#record_progress_' + subtitleCurrent).css('width', '0%');

		// 播放提示音,时长100ms。
		startRecordSnd.play();
		
	} else {
		//停止录音
		bPlayAfterRecord = false;
		onStopRecord();

		if (waitRecordStopTimer != null) {
			window.clearInterval(waitRecordStopTimer);
		}

		// 等待录音完成，再开始新的录音。
		waitRecordStopTimer = window.setInterval(function(){
			if (!isRecordStart) {
				//console.log("record has done.")
				window.clearInterval(waitRecordStopTimer);
				waitRecordStopTimer = null;

				onRecordBtnClick();
			}
			else {
				//console.log("record hasn't done.")
			}
		}, 100);
		
	}
}

// 当前句子录音回放按钮按下
function onPlayBtnClick(event) {
	//console.log("record playback.")
	playStatus = 2;

	// 让视频静音播放，并隐藏大播放按钮和控制条
	player.currentTime(sentenceStartTime);
	player.muted(true);
	jq(".vjs-control-panel").css("display","none");

	// 播放用户录音。
	recordPlayer = jq('#record_audio_' + subtitleCurrent)[0]; // 将jquery对象转换成js对象
	recordPlayer.currentTime = 0;

	// 重新播放伴奏和录音。
	if (accompanyPlayer != null) {
		accompanyPlayer.currentTime = sentenceStartTime;
		accompanyPlayer.play();
	}
	recordPlayer.play();
	player.playbackRate(1);
	player.play();
}


</script>


<!--{/block}-->